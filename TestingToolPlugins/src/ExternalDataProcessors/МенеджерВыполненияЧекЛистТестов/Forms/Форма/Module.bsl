
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Тест) Тогда
		ПланТестирования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Тест,"ПланТестирования");
		СерьезностьДефекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Тест,"СерьезностьДефекта");
		ОбновитьТестовыеСлучаи(ПланТестирования);
		ПоказатьТаблицуРезультатовТестирования(Проверка,ТестируемыйКлиент,Тест);
	КонецЕсли;	
	
	// проверим на доступ
	Если ПравоДоступа("ИнтерактивноеДобавление",Метаданные.Справочники.Проверки)=Ложь Тогда
		Элементы.СоздатьНовуюПроверку.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//ПоследняяПроверкаПоТестироемомуКлиентуНаСервере();
	ОтображатьДетальностьУказанияВремени();
	ВремяОткрытияФормы = ТекущаяДата();
	ОформлениеОтображенияОшибки();
	Если НЕ ЗначениеЗаполнено(ШкалаВремениВыполнения) Тогда
		ШкалаВремениВыполнения = "мин";
	КонецЕсли;
	Элементы.ШкалаВремениВыполнения.СписокВыбора.Добавить("сек");
	Элементы.ШкалаВремениВыполнения.СписокВыбора.Добавить("мин");
	Элементы.ШкалаВремениВыполнения.СписокВыбора.Добавить("час");
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаТестовыхСлучаевПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.ТаблицаТестовыхСлучаев.ТекущиеДанные;
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОформлениеОтображенияОшибки((ТекущиеДанные.Провал ИЛИ ТекущиеДанные.Ошибка));
КонецПроцедуры

&НаКлиенте
Процедура ОформлениеОтображенияОшибки(Знач СтатусОшибки=Ложь)
	//Элементы.ГруппаОшибка.Доступность = СтатусОшибки;
	Элементы.ТаблицаТестовыхСлучаевОписаниеОшибки.ТолькоПросмотр = НЕ СтатусОшибки;
КонецПроцедуры

&НаКлиенте
Процедура ТестПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Тест) Тогда
		ПланТестирования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Тест,"ПланТестирования");
		СерьезностьДефекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Тест,"СерьезностьДефекта");
		ОбновитьТестовыеСлучаи(ПланТестирования);
	КонецЕсли;
	ПоказатьТаблицуРезультатовТестирования(Проверка,ТестируемыйКлиент,Тест);
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПриИзменении(Элемент)
	ПоказатьТаблицуРезультатовТестирования(Проверка,ТестируемыйКлиент,Тест);
КонецПроцедуры

&НаКлиенте
Процедура ТестируемыйКлиентПриИзменении(Элемент)
	ПоследняяПроверкаПоТестироемомуКлиентуНаСервере();
	ПоказатьТаблицуРезультатовТестирования(Проверка,ТестируемыйКлиент,Тест);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТестовыхСлучаевРезультатПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаТестовыхСлучаев.ТекущиеДанные;
	
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// если снимаем флаг, тогда отмена
	Если Найти(Элемент.Имя,"Провал") И ТекущиеДанные.Провал = Ложь Тогда
		ТекущиеДанные.Провал = Истина;
		Возврат;
	ИначеЕсли Найти(Элемент.Имя,"Ошибка") И ТекущиеДанные.Ошибка = Ложь Тогда
		ТекущиеДанные.Ошибка = Истина;
		Возврат;
	ИначеЕсли Найти(Элемент.Имя,"Успешно") И ТекущиеДанные.Успешно = Ложь Тогда
		ТекущиеДанные.Успешно = Истина;
		Возврат;
	ИначеЕсли Найти(Элемент.Имя,"Пропуск") И ТекущиеДанные.Пропуск = Ложь Тогда
		ТекущиеДанные.Пропуск = Истина;
		Возврат;
	КонецЕсли;
	
	// снимем флажки для других состояний
	Если Найти(Элемент.Имя,"Провал") Тогда
		ТекущиеДанные.Успешно = Ложь;
		ТекущиеДанные.Ошибка = Ложь;
		ТекущиеДанные.Пропуск = Ложь;
		ТекущиеДанные.ИндексКартинки = 4;
	ИначеЕсли Найти(Элемент.Имя,"Ошибка") Тогда
		ТекущиеДанные.Успешно = Ложь;
		ТекущиеДанные.Провал = Ложь;
		ТекущиеДанные.Пропуск = Ложь;
		ТекущиеДанные.ИндексКартинки = 3;
	ИначеЕсли Найти(Элемент.Имя,"Успешно") Тогда
		ТекущиеДанные.Ошибка = Ложь;
		ТекущиеДанные.Провал = Ложь;
		ТекущиеДанные.Пропуск = Ложь;
		ТекущиеДанные.ИндексКартинки = 1;
	ИначеЕсли Найти(Элемент.Имя,"Пропуск") Тогда
		ТекущиеДанные.Ошибка = Ложь;
		ТекущиеДанные.Провал = Ложь;
		ТекущиеДанные.Успешно = Ложь;
		ТекущиеДанные.ИндексКартинки = 0;
	КонецЕсли;
	
	ОформлениеОтображенияОшибки((ТекущиеДанные.Провал ИЛИ ТекущиеДанные.Ошибка));
	
	ПересчитатьТаблицуТестов();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТестовыхСлучаевПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаСервере
Процедура ОбновитьТестовыеСлучаи(Знач ПланТестирования)
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПланыТестированияШагиДействия.Ссылка,
	|	ПланыТестированияШагиДействия.НомерСтроки КАК НомерСтроки,
	|	ПланыТестированияШагиДействия.Описание
	|ИЗ
	|	Справочник.ПланыТестирования.ШагиДействия КАК ПланыТестированияШагиДействия
	|ГДЕ
	|	ПланыТестированияШагиДействия.Ссылка = &ПланТестирования
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	Запрос.УстановитьПараметр("ПланТестирования",ПланТестирования);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаТестовыхСлучаев.Очистить();
	
	Пока Выборка.Следующий() Цикл
		стр_н = ТаблицаТестовыхСлучаев.Добавить();
		стр_н.Пропуск = Истина;
		стр_н.НомерПоПорядку = Выборка.НомерСтроки;
		стр_н.ТестовыйСлучай = Выборка.Описание;
	КонецЦикла;
	
	ЭтаФорма.Заголовок = "Новый ручной тест";
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатыТестов()
	
	Для каждого стр из ТаблицаТестовыхСлучаев Цикл
		Если стр.Провал=Истина Тогда
			стр.РезультатВыполнения = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияШагов.Провал");
		ИначеЕсли стр.Ошибка=Истина Тогда
			стр.РезультатВыполнения = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияШагов.Ошибка");
		ИначеЕсли стр.Успешно=Истина Тогда
			стр.РезультатВыполнения = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияШагов.Успешно");
		ИначеЕсли стр.Пропуск=Истина Тогда
			стр.РезультатВыполнения = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияШагов.Пропуск");
		Иначе
			стр.РезультатВыполнения = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияШагов.Неопределено");
		КонецЕсли;
		стр.СерьезностьДефекта = СерьезностьДефекта;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьРезультатыТестированияНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Тест) ИЛИ НЕ ЗначениеЗаполнено(ТестируемыйКлиент) ИЛИ НЕ ЗначениеЗаполнено(Проверка) Тогда
		Сообщить("Тест, Тестируемый клиент, Проверка - должны быть указаны обязательно!");
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВремяВыполненияСек) И УказыватьВремяВыполненияДляКажтогоШага=Ложь Тогда
		Сообщить("Укажите время выполнения теста в целом!");
		Возврат Ложь;
	КонецЕсли;
	
	ОбработатьРезультатыТестов();
	
	Попытка
		
		// сформируем записи в наборы тестовых случаев	
		НаборЗаписей = РегистрыСведений.ПротоколыВыполненияТестовыхСлучаев.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ТестируемыйКлиент.Установить(ТестируемыйКлиент);
		НаборЗаписей.Отбор.Проверка.Установить(Проверка);
		НаборЗаписей.Отбор.Тест.Установить(Тест);
		
		Для каждого стр из ТаблицаТестовыхСлучаев Цикл
			
			стр_н = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(стр_н,стр);
			стр_н.ТестируемыйКлиент = ТестируемыйКлиент;
			стр_н.Тест = Тест;
			стр_н.Проверка = Проверка;
			
		КонецЦикла;
		
		
		НаборЗаписей.Записать();
		
		Если ТаблицаТестов.Количество()>0 Тогда
			
			стр_т = ТаблицаТестов[0];
			// сформируем записи в регистр наборов
			МенеджерЗаписи = РегистрыСведений.ПротоколыВыполненияТестов.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ТестируемыйКлиент = ТестируемыйКлиент;
			МенеджерЗаписи.Проверка = Проверка;
			МенеджерЗаписи.Тест = Тест;
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи,стр_т);	
			Если УказыватьВремяВыполненияДляКажтогоШага=Ложь Тогда
				МенеджерЗаписи.ВремяВыполнения = ВремяВыполненияСек;
			КонецЕсли;
			МенеджерЗаписи.СерьезностьДефекта = Тест.СерьезностьДефекта;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
		ЭтаФорма.Модифицированность = Ложь;
				
	Исключение
		
		Сообщить(ОписаниеОшибки());
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьРезультатыТестирования(Команда)
	Если ЗаписатьРезультатыТестированияНаСервере() = Истина Тогда
		ПоказатьОповещениеПользователя("Изменения успешно внесены");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПересчитатьТаблицуТестов()
	
	Если ТаблицаТестов.Количество()=0 Тогда
		стр_н = ТаблицаТестов.Добавить();
		стр_н.РезультатВыполнения = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияШагов.Неопределено");
	КонецЕсли;
	
	ОбработатьРезультатыТестов();

	стр_т = ТаблицаТестов[0];
	
	стр_т.КоличествоТестовыхСлучаев = 0;
	стр_т.КоличествоПровалов = 0;
	стр_т.КоличествоОшибок = 0;
	стр_т.КоличествоПропущенных = 0;
	стр_т.ВремяВыполнения = 0;
	стр_т.РезультатВыполнения = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияШагов.Неопределено");
	
	Для каждого стр из ТаблицаТестовыхСлучаев Цикл
		// посчитаем
		стр_т.КоличествоТестовыхСлучаев = стр_т.КоличествоТестовыхСлучаев+1;
		стр_т.ВремяВыполнения = стр_т.ВремяВыполнения+стр.ВремяВыполнения;
		Если стр.Провал=Истина Тогда
			стр_т.КоличествоПровалов = стр_т.КоличествоПровалов+1;
		ИначеЕсли стр.Ошибка=Истина Тогда
			стр_т.КоличествоОшибок = стр_т.КоличествоОшибок+1;
		ИначеЕсли стр.Пропуск=Истина Тогда
			стр_т.КоличествоПропущенных = стр_т.КоличествоПропущенных+1;
		КонецЕсли;
		// сделаем вывод по результату теста в целом
		Если стр.РезультатВыполнения = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияШагов.Провал") Тогда
			стр_т.РезультатВыполнения = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияШагов.Провал");
			стр_т.ИндексКартинки = 4;
		ИначеЕсли стр.РезультатВыполнения = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияШагов.Ошибка")
			И НЕ стр_т.РезультатВыполнения = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияШагов.Провал") Тогда
			стр_т.РезультатВыполнения = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияШагов.Ошибка");
			стр_т.ИндексКартинки = 3;
		ИначеЕсли стр.РезультатВыполнения = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияШагов.Успешно")
			И НЕ стр_т.РезультатВыполнения = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияШагов.Провал") 
			И НЕ стр_т.РезультатВыполнения = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияШагов.Ошибка") Тогда
			стр_т.РезультатВыполнения = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияШагов.Успешно");
			стр_т.ИндексКартинки = 1;
		ИначеЕсли стр.РезультатВыполнения = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияШагов.Пропуск")
			И НЕ стр_т.РезультатВыполнения = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияШагов.Провал") 
			И НЕ стр_т.РезультатВыполнения = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияШагов.Ошибка") 
			И НЕ стр_т.РезультатВыполнения = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияШагов.Успешно") Тогда
			стр_т.РезультатВыполнения = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияШагов.Пропуск");
			стр_т.ИндексКартинки = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьТаблицуРезультатовТестирования(Знач мПроверка,Знач мТестируемыйКлиент, Знач мТест)
	
	Если НЕ ЗначениеЗаполнено(мПроверка) ИЛИ НЕ ЗначениеЗаполнено(мТестируемыйКлиент) ИЛИ НЕ ЗначениеЗаполнено(мТест) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Т.Проверка,
	|	Т.ТестируемыйКлиент,
	|	Т.Тест,
	|	Т.ТестовыйСлучай,
	|	Т.РезультатВыполнения,
	|	Т.ОписаниеОшибки,
	|	Т.ДатаВыполенения,
	|	Т.НомерПоПорядку КАК НомерПоПорядку,
	|	Т.КоличествоПровалов,
	|	Т.КоличествоШагов,
	|	Т.КоличествоОшибок,
	|	Т.КоличествоПропущенных,
	|	Т.ВремяВыполнения,
	|	Т.СерьезностьДефекта,
	|	Т.ЭтоПапка,
	|	Т.Приложение,
	|	Т.ЕстьПриложение
	|ИЗ
	|	РегистрСведений.ПротоколыВыполненияТестовыхСлучаев КАК Т
	|ГДЕ
	|	Т.Проверка = &Проверка
	|	И Т.ТестируемыйКлиент = &ТестируемыйКлиент
	|	И Т.Тест = &Тест
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерПоПорядку";
	Запрос.УстановитьПараметр("Проверка",мПроверка);
	Запрос.УстановитьПараметр("ТестируемыйКлиент",мТестируемыйКлиент);
	Запрос.УстановитьПараметр("Тест",мТест);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаТестовыхСлучаев.Очистить();
	Пока Выборка.Следующий() Цикл
		стр_н = ТаблицаТестовыхСлучаев.Добавить();
		ЗаполнитьЗначенияСвойств(стр_н,Выборка);
		Если Выборка.РезультатВыполнения=ПредопределенноеЗначение("Перечисление.РезультатыВыполненияШагов.Провал") Тогда
			стр_н.Провал = Истина;
			стр_н.ИндексКартинки = 4;
		ИначеЕсли Выборка.РезультатВыполнения=ПредопределенноеЗначение("Перечисление.РезультатыВыполненияШагов.Ошибка") Тогда
			стр_н.Ошибка = Истина;
			стр_н.ИндексКартинки = 3;
		ИначеЕсли Выборка.РезультатВыполнения=ПредопределенноеЗначение("Перечисление.РезультатыВыполненияШагов.Успешно") Тогда
			стр_н.Успешно = Истина;
			стр_н.ИндексКартинки = 1;
		ИначеЕсли Выборка.РезультатВыполнения=ПредопределенноеЗначение("Перечисление.РезультатыВыполненияШагов.Пропуск") Тогда
			стр_н.Пропуск = Истина;
			стр_н.ИндексКартинки = 0;
		Иначе
			стр_н.ИндексКартинки = 0;
		КонецЕсли;
	КонецЦикла;
	
	// заполним новыми значениями
	Если ТаблицаТестовыхСлучаев.Количество()=0 Тогда
		ОбновитьТестовыеСлучаи(ПланТестирования);
	Иначе
		ЭтаФорма.Заголовок = "Существующий ручной тест";
	КонецЕсли;
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Т.Проверка,
	|	Т.ТестируемыйКлиент,
	|	Т.Тест,
	|	Т.РезультатВыполнения,
	|	Т.ОписаниеОшибки,
	|	Т.ДатаВыполенения,
	|	Т.НомерПоПорядку,
	|	Т.КоличествоТестовыхСлучаев,
	|	Т.КоличествоПровалов,
	|	Т.КоличествоОшибок,
	|	Т.КоличествоПропущенных,
	|	Т.ВремяВыполнения,
	|	Т.СерьезностьДефекта
	|ИЗ
	|	РегистрСведений.ПротоколыВыполненияТестов КАК Т
	|ГДЕ
	|	Т.Проверка = &Проверка
	|	И Т.ТестируемыйКлиент = &ТестируемыйКлиент
	|	И Т.Тест = &Тест";
	Запрос.УстановитьПараметр("Проверка",мПроверка);
	Запрос.УстановитьПараметр("ТестируемыйКлиент",мТестируемыйКлиент);
	Запрос.УстановитьПараметр("Тест",мТест);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ВремяВыполненияСек = Выборка.ВремяВыполнения;
		ВремяВыполнения = ПересчитатьПриИзмененииШкалы(ВремяВыполненияСек,ШкалаВремениВыполнения);
	КонецЕсли;
	
	ПересчитатьТаблицуТестов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьТаблицуТестовыхСлучаев(Команда)
	ОбновитьТестовыеСлучаи(ПланТестирования);
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ПоследняяПроверкаПоТестироемомуКлиентуНаСервере()
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПротоколыВыполненияТестов.Проверка
	|ИЗ
	|	РегистрСведений.ПротоколыВыполненияТестов КАК ПротоколыВыполненияТестов
	|ГДЕ
	|	ПротоколыВыполненияТестов.ТестируемыйКлиент = &ТестируемыйКлиент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПротоколыВыполненияТестов.Проверка.Код УБЫВ"; 
	ЗАпрос.УстановитьПараметр("ТестируемыйКлиент",ТестируемыйКлиент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Проверка = Выборка.Проверка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоследняяПроверкаПоТестироемомуКлиенту(Команда)
	ПоследняяПроверкаПоТестироемомуКлиентуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовуюПроверку(Команда)
	СоздатьНовуюПроверкуНаСервере();
КонецПроцедуры

&НаСервере
Процедура СоздатьНовуюПроверкуНаСервере()
	ПланировщикЗаданийСервер.СоздатьПроврекуДляЗадания(Проверка);
КонецПроцедуры

&НаКлиенте
Процедура СписокТестовПриАктивизацииПоля(Элемент)

КонецПроцедуры

&НаКлиенте
Процедура СписокТестовПриАктивизацииСтроки(Элемент)
	Если УжеРаботаем=Истина Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = Элементы.СписокТестов.ТекущиеДанные;
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоГруппа=Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Ссылка=Тест Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.Модифицированность=Истина Тогда
		ЗададимВопросПриИзменении(ТекущиеДанные.Ссылка,ТекущиеДанные.ПланТестирования);
	Иначе
		Тест = ТекущиеДанные.Ссылка;
		ПланТестирования = ТекущиеДанные.ПланТестирования;
		УжеРаботаем = Истина;
		ПоказатьТаблицуРезультатовТестирования(Проверка,ТестируемыйКлиент,Тест);
		УжеРаботаем = Ложь;
	КонецЕсли;
	
	
КонецПроцедуры


&НаКлиенте
Процедура СписокТестовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СписокТестовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
КонецПроцедуры


&НаКлиенте
Процедура ЗададимВопросПриИзменении(Знач мТест,Знач мПланТестирования)
	
	
	// зададим вопрос/ об отмене изменений
	мПараметры = новый Структура("Тест,ПланТестирования",мТест,мПланТестирования);
	Оповещение = Новый ОписаниеОповещения("ПослеОтветаНаВопросИзмененийПоТексту", ЭтотОбъект, мПараметры); // Прописываем название процедуры-обработчика.
	
	ПоказатьВопрос(Оповещение, "В текущем сценарии обнаружены изменения. Игнорировать?",  // вместо привычного "Вопрос", теперь "ПоказатьВопрос"
	РежимДиалогаВопрос.ДаНетОтмена,
	0,  // задержка (секунды). необязательно
	КодВозвратаДиалога.Да, // задает кнопку по умолчанию. необязательно
	"Обнаружены изменения ..." // устанавливаем заголовок. необязательно
	);
	
КонецПроцедуры

&НаКлиенте 
Процедура ПослеОтветаНаВопросИзмененийПоТексту(Результат, Параметры) Экспорт // здесь, думаю, комментировать нечего
	    	
	Если Результат = КодВозвратаДиалога.Да Тогда  
		ЭтаФорма.Модифицированность = Ложь;
		Тест = Параметры.Тест;
		ПланТестирования = Параметры.ПланТестирования;
		ПоказатьТаблицуРезультатовТестирования(Проверка,ТестируемыйКлиент,Тест);
	КонецЕсли;	
	
КонецПроцедуры


&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	ПоследняяПроверкаПоТестироемомуКлиентуНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура СкрытьОткрытьПанельСпискаТестов(Команда)
	
	Если Элементы.СкрытьОткрытьПанельСпискаТестов.Пометка Тогда
		Элементы.СкрытьОткрытьПанельСпискаТестов.Пометка = Ложь;
		Элементы.СкрытьОткрытьПанельСпискаТестов.Картинка = БиблиотекаКартинок.Вперед;
		Элементы.Группа2.Видимость = Ложь;
	Иначе
		Элементы.СкрытьОткрытьПанельСпискаТестов.Пометка = Истина;
		Элементы.СкрытьОткрытьПанельСпискаТестов.Картинка = БиблиотекаКартинок.Назад;
		Элементы.Группа2.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
КонецПроцедуры


&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// спросим если были изменения
	Если ЭтаФорма.Модифицированность=Истина Тогда 
		Отказ = Истина;
		
		мПараметры = новый Структура();
		// зададим вопрос/ об отмене изменений
		Оповещение = Новый ОписаниеОповещения("ПослеОтветаНаВопросЗакрытияПриИзменениях", ЭтотОбъект, мПараметры);
		ПоказатьВопрос(Оповещение, "В текущем сценарии проверки обнаружены изменения."+Символы.ПС+"Сохранить изменения и закрыть (да), закрыть без сохранения (нет) и не закрывать (отмена)?",  
		РежимДиалогаВопрос.ДаНетОтмена,
		0,  // задержка (секунды). необязательно
		КодВозвратаДиалога.Да, // задает кнопку по умолчанию. необязательно
		"Обнаружены изменения ..." // устанавливаем заголовок. необязательно
		);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте 
Процедура ПослеОтветаНаВопросЗакрытияПриИзменениях(Результат, Параметры) Экспорт // здесь, думаю, комментировать нечего
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		Если ЗаписатьРезультатыТестированияНаСервере() = Истина Тогда
			ПоказатьОповещениеПользователя("Изменения успешно внесены");
			ЭтаФорма.Закрыть();			
		КонецЕсли;		
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		ЭтаФорма.Модифицированность=Ложь;
		ЭтаФорма.Закрыть();		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УказыватьВремяВыполненияДляКажтогоШагаПриИзменении(Элемент)
	ОтображатьДетальностьУказанияВремени();
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьДетальностьУказанияВремени()
	
	ДетальностьОтображения = УказыватьВремяВыполненияДляКажтогоШага;
	
	Если ДетальностьОтображения=Истина Тогда
		Элементы.ВремяВыполнения.Видимость = Ложь;
		Элементы.ШкалаВремениВыполнения.Видимость = Ложь;
		Элементы.ТаблицаТестовыхСлучаевВремяВыполнения.Видимость = Истина;
		Элементы.ТаблицаТестовыхСлучаевДатаВыполенения.Видимость = Истина;
		Элементы.ТаблицаТестовВремяВыполнения.Видимость = Истина;
	Иначе
		Элементы.ВремяВыполнения.Видимость = Истина;
		Элементы.ШкалаВремениВыполнения.Видимость = Истина;
		Элементы.ТаблицаТестовыхСлучаевВремяВыполнения.Видимость = Ложь;
		Элементы.ТаблицаТестовыхСлучаевДатаВыполенения.Видимость = Ложь;
		Элементы.ТаблицаТестовВремяВыполнения.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШкалаВремениВыполненияПриИзменении(Элемент)
	
	ВремяВыполнения = ПересчитатьПриИзмененииШкалы(ВремяВыполненияСек,ШкалаВремениВыполнения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПересчитатьПриИзмененииШкалы(Знач ВремяВыполненияСек, Знач ШкалаВремениВыполнения="мин")
	
	Если Врег(ШкалаВремениВыполнения)="СЕК" Тогда
		ВремяВыполнения = ВремяВыполненияСек;
	ИначеЕсли Врег(ШкалаВремениВыполнения)="МИН" Тогда
		ВремяВыполнения = ВремяВыполненияСек/60;
	ИначеЕсли Врег(ШкалаВремениВыполнения)="ЧАС" Тогда
		ВремяВыполнения = ВремяВыполненияСек/3600;
	Иначе // по умолчанию в минутах
		ВремяВыполнения = ВремяВыполненияСек/60;
	КонецЕсли;
	
	Возврат ВремяВыполнения;

КонецФункции


&НаКлиенте
Процедура ВремяВыполненияПриИзменении(Элемент)
	
	Если Врег(ШкалаВремениВыполнения)="СЕК" Тогда
		ВремяВыполненияСек = ВремяВыполнения;
	ИначеЕсли Врег(ШкалаВремениВыполнения)="МИН" Тогда
		ВремяВыполненияСек = ВремяВыполнения*60;
	ИначеЕсли Врег(ШкалаВремениВыполнения)="ЧАС" Тогда
		ВремяВыполненияСек = ВремяВыполнения*3600;
	Иначе // по умолчанию в минутах
		ВремяВыполненияСек = ВремяВыполнения*60;
	КонецЕсли;
		
КонецПроцедуры

