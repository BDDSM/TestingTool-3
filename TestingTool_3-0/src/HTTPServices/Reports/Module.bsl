
Функция DatasGet(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	
	МассивДанных = новый Массив;
	id = Запрос.ПараметрыURL.Получить("id");
	name = Врег(Запрос.ПараметрыURL.Получить("name"));
	test = Врег(Запрос.ПараметрыURL.Получить("test"));
	ТестируемыйКлиент = Справочники.ТестируемыеКлиенты.НайтиТестируемыйКлиентПоID(id);
	
	Если name=Врег("behaviors.historyqualitychanges") Тогда 		
		МассивДанных = ПолучитьИсториюИзменения(ТестируемыйКлиент);		
	ИначеЕсли name=Врег("behaviors.historyleadtime") Тогда 		
		МассивДанных = ПолучитьИсториюВремениВыполнения(ТестируемыйКлиент); 
	ИначеЕсли name=ВРег("behaviors.historytestcount") Тогда
		МассивДанных = ПолучитьИсториюКоличестваТестов(ТестируемыйКлиент);
	ИначеЕсли name=Врег("behaviors.executionhistory") Тогда 		
		МассивДанных = ПолучитьИсториюВыполнения(ТестируемыйКлиент);
	ИначеЕсли name=Врег("behaviors.stabilityhistory") Тогда 		
		МассивДанных = ПолучитьТаблицуСтабильностьВыполненияТестов(ТестируемыйКлиент);
	ИначеЕсли name=Врег("graphics.severity") Тогда 		
		МассивДанных = ПолучитьСерьезностьДефектов(ТестируемыйКлиент); 
	ИначеЕсли name=Врег("graphics.duration") Тогда 		
		МассивДанных = ПолучитьПродолжительность(ТестируемыйКлиент);
	ИначеЕсли name=Врег("graphics.quality") Тогда 		
		МассивДанных = СформироватьДиаграммуСтатусы(ТестируемыйКлиент);
	ИначеЕсли name=Врег("graphics.ratiooftwochecks") Тогда	
		МассивДанных = СформироватьДиаграммуСоотношениеТестов(ТестируемыйКлиент);
	ИначеЕсли name=Врег("overview.main") Тогда 		
		МассивДанных = ПолучитьОбзорВЦелом(ТестируемыйКлиент); 		
	ИначеЕсли name=Врег("overview.defects") Тогда 		
		МассивДанных = ПолучитьОбзорПоДефектам(ТестируемыйКлиент); 
	ИначеЕсли name=Врег("overview.config") Тогда 		
		МассивДанных = ПолучитьОбзорКонфигурации(); 
	ИначеЕсли name=врег("xunit.testslist") Тогда
		МассивДанных = ПолучитьСписокТестов(ТестируемыйКлиент);
	ИначеЕсли name=врег("xunit.testcaseslist") Тогда
		МассивДанных = ПолучитьСписокТестовыхСлучаев(ТестируемыйКлиент,test);
		
	Иначе 		
		Возврат СоздатьОтвет(404,"Данные отсутсвуют");		
	КонецЕсли;
	
	JsonСтрока = ДанныеВJSONСтроку(МассивДанных);
	Ответ = СоздатьОтвет(200,"",JsonСтрока);
	
	Возврат Ответ;
КонецФункции

Функция TestClientsGet(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	
	Попытка
		МассивДанных = ПолучитьСписокТестируемыхКлиентов();
		JsonСтрока = ДанныеВJSONСтроку(МассивДанных);
		
		Ответ = СоздатьОтвет(200,"",JsonСтрока);
	Исключение
		
		Ответ = СоздатьОтвет(500,ОписаниеОшибки());
		
	КонецПопытки;
	
	Возврат Ответ;
КонецФункции

Функция AuthorizeCheck(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	
	JsonСтрока = ДанныеВJSONСтроку(Истина);
	Ответ = СоздатьОтвет(200,"",JsonСтрока);
	
	Возврат Ответ;
КонецФункции

Функция VersionGet(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	
	Попытка
		
		СтруктураДанных = ПолучитьИнформациюОКонфигурации();
	
		JsonСтрока = ДанныеВJSONСтроку(СтруктураДанных);		
		Ответ = СоздатьОтвет(200,"",JsonСтрока);
		
	Исключение
		
		Ответ = СоздатьОтвет(500,ОписаниеОшибки());
		
	КонецПопытки;
	Возврат Ответ;
КонецФункции

Функция ScreensGet(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	
	Попытка
		
		СтруктураДанных = новый Структура();
		
		МассивДанных = новый Массив;
		МассивДанных.Добавить("behaviors.historyqualitychanges");
		МассивДанных.Добавить("behaviors.historyleadtime");
		МассивДанных.Добавить("behaviors.historytestcount");
		МассивДанных.Добавить("behaviors.executionhistory");
		МассивДанных.Добавить("behaviors.stabilityhistory");
		МассивДанных.Добавить("graphics.severity");
		МассивДанных.Добавить("graphics.duration");
		МассивДанных.Добавить("graphics.quality");
		МассивДанных.Добавить("graphics.ratiooftwochecks");
		МассивДанных.Добавить("overview.main");
		МассивДанных.Добавить("overview.defects");
		МассивДанных.Добавить("overview.config");
		МассивДанных.Добавить("xunit.testslist");
		МассивДанных.Добавить("xunit.testcaseslist");		
		
		СтруктураДанных.Вставить("МассивДанных",МассивДанных);
	
		JsonСтрока = ДанныеВJSONСтроку(СтруктураДанных);		
		Ответ = СоздатьОтвет(200,"",JsonСтрока);
		
	Исключение
		
		Ответ = СоздатьОтвет(500,ОписаниеОшибки());
		
	КонецПопытки;
	Возврат Ответ;

КонецФункции


#область РаботаСДанными

Функция ДанныеВJSONСтроку(Знач Данные) Экспорт
	
	ПараметерыЗаписи = Новый ПараметрыЗаписиJSON(,,,ЭкранированиеСимволовJSON.СимволыВнеASCII,Истина,Истина);
	НастройкиСериализации = Новый НастройкиСериализацииJSON();
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку( ПараметерыЗаписи );
	Попытка
		ЗаписатьJSON( ЗаписьJSON, Данные, НастройкиСериализации );
	Исключение
		ЗаписьЖурналаРегистрации("Reports.ДанныеВJSONСтроку",УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());
	Конецпопытки;
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция ДанныеИзJSONСтроки( Строка , Знач ИменаСвойствСоЗначениямиДата = "") Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку( Строка );
	Данные = ПрочитатьJSON( ЧтениеJSON ,, ИменаСвойствСоЗначениямиДата );
	ЧтениеJSON.Закрыть();
	
	Возврат Данные;
	
КонецФункции

Функция СоздатьОтвет( КодСостояния = 200, ТекстСостояния = "", Сообщение = "", ЭтоДвоичныеДанные = Ложь) Экспорт
	
	Заголовки = Новый Соответствие();	
	Если ЭтоДвоичныеДанные Тогда // Виссаров ES-2749 [20.09.2017] ++
		Заголовки.Вставить("Content-Type", "text/plain;charset=utf-8");
	Иначе		
		Если КодСостояния >= 400 И КодСостояния <= 500 Тогда
			Заголовки.Вставить("Content-Type", "text/plain;charset=utf-8");
		Иначе
			Заголовки.Вставить("Content-Type", "application/json;charset=utf-8");
		КонецЕсли;
	КонецЕсли;
	
	Заголовки.Вставить("Cache-Control", "no-cache, no-store, private"); 	
	Ответ = Новый HTTPСервисОтвет(КодСостояния, ТекстСостояния, Заголовки );
	
	Если Не ПустаяСтрока(Сообщение) Тогда
		Если ЭтоДвоичныеДанные Тогда // Виссаров ES-2749 [20.09.2017] ++
			Ответ.УстановитьТелоИзДвоичныхДанных(Сообщение);
		Иначе
			Ответ.УстановитьТелоИзСтроки( Сообщение );
		КонецЕсли;   
	КонецЕсли;
	Если КодСостояния >= 300 Тогда
		Ответ.УстановитьТелоИзСтроки( ТекстСостояния );
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции 

#конецОбласти

#Область Разные

Функция ПолучитьПоследнююПроверкуДляТестируемогоКлиента(Знач ТестируемыйКлиент) Экспорт
	
	Проверка = Справочники.Проверки.ПустаяСсылка();
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	Т.Проверка КАК Проверка
	|ИЗ
	|	РегистрСведений.ПротоколыВыполненияТестов КАК Т
	|ГДЕ
	|	Т.ТестируемыйКлиент = &ТестируемыйКлиент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Т.Проверка.Код УБЫВ";
	Запрос.УстановитьПараметр("ТестируемыйКлиент",ТестируемыйКлиент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() Тогда
			Проверка = Выборка.Проверка;
		КонецЕсли;
		
	КонецЕсли;
	
	
	Возврат Проверка;
	
КонецФункции

Функция ПолучитьСписокТестируемыхКлиентов()  Экспорт
	
	МассивПакетовТочек = новый Массив;
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТестируемыеКлиенты.Ссылка КАК Ссылка,
	|	ТестируемыеКлиенты.ID КАК ID,
	|	ТестируемыеКлиенты.Наименование КАК Наименование,
	|	ТестируемыеКлиенты.Комментарий
	|ИЗ
	|	Справочник.ТестируемыеКлиенты КАК ТестируемыеКлиенты
	|ГДЕ
	|	ТестируемыеКлиенты.ПометкаУдаления = ЛОЖЬ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивПакетовТочек.Добавить(новый Структура("GUID,ID,Наименование,Комментарий",XMLСтрока(Выборка.Ссылка),Выборка.id, Выборка.Наименование,Выборка.Комментарий));
	КонецЦикла;
	
	Возврат МассивПакетовТочек;
КонецФункции

#КонецОбласти

#Область Обзор

Функция ПолучитьОбзорВЦелом(ТестируемыйКлиент) Экспорт
	
	Проверка = ПолучитьПоследнююПроверкуДляТестируемогоКлиента(ТестируемыйКлиент);


	СтруктураДанных = новый Структура;
	СтруктураДанных.Вставить("Проверка",Строка(Проверка));
	СтруктураДанных.Вставить("ДатаНачала",Проверка.ДатаНачала);
	СтруктураДанных.Вставить("ДатаНачалаСтрокой",Строка(Формат(Проверка.ДатаНачала,"ДЛФ=DDT")));
	СтруктураДанных.Вставить("ТестируемыйКлиентID",ТестируемыйКлиент.ID);
	СтруктураДанных.Вставить("ТестируемыйКлиентПредставление",ТестируемыйКлиент.Наименование);
	СтруктураДанных.Вставить("ТипОбъекта","HTML");
	СтруктураДанных.Вставить("МассивДанных",новый Массив);

	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Т.Проверка,
	|	Т.ТестируемыйКлиент,
	|	Т.Тест,
	|	Т.РезультатВыполнения,
	|	Т.ОписаниеОшибки,
	|	Т.ДатаВыполенения,
	|	Т.НомерПоПорядку,
	|	Т.КоличествоТестовыхСлучаев,
	|	Т.КоличествоПровалов,
	|	Т.КоличествоОшибок,
	|	Т.КоличествоПропущенных,
	|	Т.ВремяВыполнения
	|ПОМЕСТИТЬ ВтПоследниеПроверки
	|ИЗ
	|	РегистрСведений.ПротоколыВыполненияТестов КАК Т
	|ГДЕ
	|	Т.ТестируемыйКлиент = &ТестируемыйКлиент
	|	И Т.Проверка = &Проверка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтПоследниеПроверки.ТестируемыйКлиент,
	|	ВтПоследниеПроверки.Проверка,
	|	СУММА(ВтПоследниеПроверки.КоличествоТестовыхСлучаев) КАК КоличествоТестовыхСлучаев,
	|	СУММА(ВтПоследниеПроверки.КоличествоПровалов) КАК КоличествоПровалов,
	|	СУММА(ВтПоследниеПроверки.КоличествоОшибок) КАК КоличествоОшибок,
	|	СУММА(ВтПоследниеПроверки.КоличествоПропущенных) КАК КоличествоПропущенных,
	|	СУММА(ВтПоследниеПроверки.КоличествоТестовыхСлучаев - ВтПоследниеПроверки.КоличествоПровалов - ВтПоследниеПроверки.КоличествоОшибок - ВтПоследниеПроверки.КоличествоПропущенных) КАК КоличествоУспешных,
	|	СУММА(ВтПоследниеПроверки.ВремяВыполнения) КАК ВремяВыполнения,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВтПоследниеПроверки.Тест) КАК КоличествоТестов
	|ИЗ
	|	ВтПоследниеПроверки КАК ВтПоследниеПроверки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтПоследниеПроверки.Проверка,
	|	ВтПоследниеПроверки.ТестируемыйКлиент";
	
	Запрос.УстановитьПараметр("ТестируемыйКлиент",ТестируемыйКлиент);
	Запрос.УстановитьПараметр("Проверка",Проверка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		СтрукутраОбзора = новый Структура;
		СтрукутраОбзора.Вставить("ТестируемыйКлиент",Строка(Выборка.ТестируемыйКлиент));
		СтрукутраОбзора.Вставить("Проверка",Строка(Выборка.Проверка));
		СтрукутраОбзора.Вставить("ДатаНачала",Строка(Формат(Выборка.Проверка.ДатаНачала,"ДЛФ=DDT")));
		СтрукутраОбзора.Вставить("КоличествоТестов",Выборка.КоличествоТестов);
		СтрукутраОбзора.Вставить("КоличествоТестовыхСлучаев",Выборка.КоличествоТестовыхСлучаев);
		СтрукутраОбзора.Вставить("КоличествоПровалов",Выборка.КоличествоПровалов);
		СтрукутраОбзора.Вставить("КоличествоОшибок",Выборка.КоличествоОшибок);
		СтрукутраОбзора.Вставить("КоличествоПропущенных",Выборка.КоличествоПропущенных);
		СтрукутраОбзора.Вставить("КоличествоУспешных",Выборка.КоличествоУспешных);
		СтрукутраОбзора.Вставить("ВремяВыполнения",Выборка.ВремяВыполнения);
		
		СтруктураДанных.МассивДанных.Добавить(СтрукутраОбзора);
		
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция ПолучитьОбзорПоДефектам(ТестируемыйКлиент) Экспорт
	
	Проверка = ПолучитьПоследнююПроверкуДляТестируемогоКлиента(ТестируемыйКлиент);


	СтруктураДанных = новый Структура;
	СтруктураДанных.Вставить("Проверка",Строка(Проверка));
	СтруктураДанных.Вставить("ДатаНачала",Проверка.ДатаНачала);
	СтруктураДанных.Вставить("ДатаНачалаСтрокой",Строка(Формат(Проверка.ДатаНачала,"ДЛФ=DDT")));
	СтруктураДанных.Вставить("ТестируемыйКлиентID",ТестируемыйКлиент.ID);
	СтруктураДанных.Вставить("ТестируемыйКлиентПредставление",ТестируемыйКлиент.Наименование);
	СтруктураДанных.Вставить("ТипОбъекта","HTML");
	СтруктураДанных.Вставить("МассивДанных",новый Массив);

	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(Т.ТестовыйСлучай) КАК КоличествоДефектов
	|ИЗ
	|	РегистрСведений.ПротоколыВыполненияТестовыхСлучаев КАК Т
	|ГДЕ
	|	Т.Проверка = &Проверка
	|	И Т.ТестируемыйКлиент = &ТестируемыйКлиент
	|	И Т.РезультатВыполнения В (ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияШагов.Провал), ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияШагов.Ошибка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 10
	|	Т.Проверка,
	|	Т.ТестируемыйКлиент,
	|	Т.Тест,
	|	Т.ТестовыйСлучай,
	|	Т.РезультатВыполнения,
	|	ВЫБОР
	|		КОГДА Т.РезультатВыполнения = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияШагов.Провал)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Порядок,
	|	Т.ОписаниеОшибки,
	|	Т.ВремяВыполнения,
	|	Т.ДатаВыполенения
	|ИЗ
	|	РегистрСведений.ПротоколыВыполненияТестовыхСлучаев КАК Т
	|ГДЕ
	|	Т.Проверка = &Проверка
	|	И Т.ТестируемыйКлиент = &ТестируемыйКлиент
	|	И Т.РезультатВыполнения В (ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияШагов.Провал), ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияШагов.Ошибка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	Запрос.УстановитьПараметр("ТестируемыйКлиент",ТестируемыйКлиент);
	Запрос.УстановитьПараметр("Проверка",Проверка);
	
	РезультатПакет = Запрос.ВыполнитьПакет();
	
	// количество дефектов
	Выборка = РезультатПакет[0].Выбрать();
	Если Выборка.Следующий() Тогда
		СтрукутраОбзора = новый Структура;
		СтрукутраОбзора.Вставить("КоличествоДефектов",Выборка.КоличествоДефектов);
		СтруктураДанных.МассивДанных.Добавить(СтрукутраОбзора);		
	КонецЕсли;
	
	
	// количество в целом
	Выборка = РезультатПакет[1].Выбрать();	
	Пока Выборка.Следующий() Цикл 		
		СтрукутраОбзора = новый Структура;
		СтрукутраОбзора.Вставить("Тест",Строка(Выборка.Тест));
		СтрукутраОбзора.Вставить("РезультатВыполнения",Строка(Выборка.РезультатВыполнения)); 		
		ОписаниеОшибки = СтрЗаменить(Выборка.ОписаниеОшибки,"Шаг №","</br><hr>Шаг №");
		//ОписаниеОшибки = Base64Строка(ОписаниеОшибки);
		СтрукутраОбзора.Вставить("ОписаниеОшибки",ОписаниеОшибки);
		
		Если Выборка.РезультатВыполнения=Перечисления.РезультатыВыполненияШагов.Провал Тогда
			СтрукутраОбзора.Вставить("Цвет",новый Структура("R,G,B",255,40,40));
		Иначе
			СтрукутраОбзора.Вставить("Цвет",новый Структура("R,G,B",255,150,40));
		КонецЕсли;
		СтруктураДанных.МассивДанных.Добавить(СтрукутраОбзора);
		
	КонецЦикла;		
	
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция ПолучитьОбзорКонфигурации() Экспорт
	
	СтруктураДанных = новый Структура;
	СтруктураДанных.Вставить("Проверка","-");
	СтруктураДанных.Вставить("ДатаНачала","-");
	СтруктураДанных.Вставить("ДатаНачалаСтрокой","-");
	СтруктураДанных.Вставить("ТестируемыйКлиентID","-");
	СтруктураДанных.Вставить("ТестируемыйКлиентПредставление","-");
	СтруктураДанных.Вставить("ТипОбъекта","HTML");
	СтруктураДанных.Вставить("МассивДанных",новый Массив);
	
	СтруктураДанных.МассивДанных.Добавить(ПолучитьИнформациюОКонфигурации());
	
	Возврат СтруктураДанных;

КонецФункции

Функция ПолучитьИнформациюОКонфигурации() Экспорт

	СтруктураДанных = новый Структура();
	СтруктураДанных.Вставить("Версия",Метаданные.Версия);
	СтруктураДанных.Вставить("Имя",Метаданные.Имя);
	СтруктураДанных.Вставить("АвторскиеПрава",Метаданные.АвторскиеПрава);
	СтруктураДанных.Вставить("ПодробнаяИнформация",Метаданные.ПодробнаяИнформация);
	СтруктураДанных.Вставить("КраткаяИнформация",Метаданные.КраткаяИнформация);
	СтруктураДанных.Вставить("Поставщик",Метаданные.Поставщик);
	СтруктураДанных.Вставить("АдресКаталогаОбновлений",Метаданные.АдресКаталогаОбновлений);
	Возврат СтруктураДанных;

КонецФункции


#КонецОбласти

#Область Графики

Функция ПолучитьИсториюИзменения(Знач ТестируемыйКлиент) Экспорт
	
	Проверка = ПолучитьПоследнююПроверкуДляТестируемогоКлиента(ТестируемыйКлиент);
	
	КоличествоОшибок = 0;
	КоличествоПропущенных = 0;
	КоличествоУспешных = 0;
	КоличествоТестовыхСлучаев = 1;
	
	СтруктураДанных = новый Структура;
	СтруктураДанных.Вставить("Проверка",Строка(Проверка));
	СтруктураДанных.Вставить("ДатаНачала",Проверка.ДатаНачала);
	СтруктураДанных.Вставить("ДатаНачалаСтрокой",Строка(Формат(Проверка.ДатаНачала,"ДЛФ=DDT")));
	СтруктураДанных.Вставить("ТестируемыйКлиентID",ТестируемыйКлиент.ID);
	СтруктураДанных.Вставить("ТестируемыйКлиентПредставление",ТестируемыйКлиент.Наименование);
	СтруктураДанных.Вставить("ТипОбъекта","Диаграмма");
	СтруктураДанных.Вставить("ВидГрафика","ГистограммаНормированная");
	СтруктураДанных.Вставить("ВидГрафикаГоризонтальная","Гистограмма");
	СтруктураДанных.Вставить("ОтображатьЛегендуГоризонтальная",Истина);
	СтруктураДанных.Вставить("ВидПодписей","Нет");
	СтруктураДанных.Вставить("ВидПодписейГоризонтальная","Процент");
	СтруктураДанных.Вставить("ОтображатьЛегенду",Ложь);
	СтруктураДанных.Вставить("МассивПакетовТочек",новый Массив);
	СтруктураДанных.Вставить("МассивСерий",новый Массив);
	СтруктураДанных.МассивСерий.Добавить(новый структура("Серия,Цвет","Успешно",новый Структура("R,G,B",50,195,50)));
	СтруктураДанных.МассивСерий.Добавить(новый структура("Серия,Цвет","Падения",новый Структура("R,G,B",255,50,50)));
	СтруктураДанных.МассивСерий.Добавить(новый структура("Серия,Цвет","Ошибки",новый Структура("R,G,B",255,165,15)));
	СтруктураДанных.МассивСерий.Добавить(новый структура("Серия,Цвет","Пропуски",новый Структура("R,G,B",195,195,195)));
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 5
	|	ПротоколыВыполненияТестов.Проверка КАК Проверка
	|ПОМЕСТИТЬ ВтПоследниеПятьПроверок
	|ИЗ
	|	РегистрСведений.ПротоколыВыполненияТестов КАК ПротоколыВыполненияТестов
	|ГДЕ
	|	ПротоколыВыполненияТестов.ТестируемыйКлиент = &ТестируемыйКлиент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Проверка.Код УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПротоколыВыполненияТестов.Проверка КАК Проверка,
	|	ПротоколыВыполненияТестов.ТестируемыйКлиент КАК ТестируемыйКлиент,
	|	СУММА(ПротоколыВыполненияТестов.КоличествоТестовыхСлучаев) КАК КоличествоТестовыхСлучаев,
	|	СУММА(ПротоколыВыполненияТестов.КоличествоПровалов) КАК КоличествоПровалов,
	|	СУММА(ПротоколыВыполненияТестов.КоличествоОшибок) КАК КоличествоОшибок,
	|	СУММА(ПротоколыВыполненияТестов.КоличествоПропущенных) КАК КоличествоПропущенных,
	|	СУММА(ПротоколыВыполненияТестов.КоличествоТестовыхСлучаев - ПротоколыВыполненияТестов.КоличествоПровалов - ПротоколыВыполненияТестов.КоличествоОшибок - ПротоколыВыполненияТестов.КоличествоПропущенных) КАК КоличествоУспешных,
	|	СУММА(ПротоколыВыполненияТестов.ВремяВыполнения) КАК ВремяВыполнения
	|ИЗ
	|	РегистрСведений.ПротоколыВыполненияТестов КАК ПротоколыВыполненияТестов
	|ГДЕ
	|	ПротоколыВыполненияТестов.ТестируемыйКлиент = &ТестируемыйКлиент
	|	И ПротоколыВыполненияТестов.Проверка В
	|			(ВЫБРАТЬ
	|				ВтПоследниеПятьПроверок.Проверка
	|			ИЗ
	|				ВтПоследниеПятьПроверок)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПротоколыВыполненияТестов.Проверка,
	|	ПротоколыВыполненияТестов.ТестируемыйКлиент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Проверка.Код";
	Запрос.УстановитьПараметр("ТестируемыйКлиент",ТестируемыйКлиент);
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	
	Пока Выборка.Следующий() Цикл
		
		
		КоличествоТестовыхСлучаев = Выборка.КоличествоТестовыхСлучаев;
		Если КоличествоТестовыхСлучаев=0 Тогда
			КоличествоТестовыхСлучаев = 1;
		КонецЕсли;
		КоличествоПровалов = Выборка.КоличествоПровалов/КоличествоТестовыхСлучаев*100;
		КоличествоОшибок = Выборка.КоличествоОшибок/КоличествоТестовыхСлучаев*100;
		КоличествоПропущенных = Выборка.КоличествоПропущенных/КоличествоТестовыхСлучаев*100;
		КоличествоУспешных = Выборка.КоличествоУспешных/КоличествоТестовыхСлучаев*100;
		
		// вставляем массив точек серий
		МассивТочекСерий = новый Массив;
		СтруктураДанных.МассивПакетовТочек.Добавить(МассивТочекСерий);		
		
		МассивТочекСерий.Добавить(новый Структура("Серия,Точка,Значение","Падения",Строка(Выборка.Проверка),КоличествоПровалов));
		МассивТочекСерий.Добавить(новый Структура("Серия,Точка,Значение","Ошибки",Строка(Выборка.Проверка),КоличествоОшибок));
		МассивТочекСерий.Добавить(новый Структура("Серия,Точка,Значение","Пропуски",Строка(Выборка.Проверка),КоличествоПропущенных));
		МассивТочекСерий.Добавить(новый Структура("Серия,Точка,Значение","Успешно",Строка(Выборка.Проверка),КоличествоУспешных));
		
	КонецЦикла;
	
	Возврат СтруктураДанных;
	
	
КонецФункции

Функция ПолучитьИсториюВремениВыполнения(Знач ТестируемыйКлиент) Экспорт
	
	Проверка = ПолучитьПоследнююПроверкуДляТестируемогоКлиента(ТестируемыйКлиент);
	
	
	СтруктураДанных = новый Структура;
	СтруктураДанных.Вставить("Проверка",Строка(Проверка));
	СтруктураДанных.Вставить("ДатаНачала",Проверка.ДатаНачала);
	СтруктураДанных.Вставить("ДатаНачалаСтрокой",Строка(Формат(Проверка.ДатаНачала,"ДЛФ=DDT")));
	СтруктураДанных.Вставить("ТестируемыйКлиентID",ТестируемыйКлиент.ID);
	СтруктураДанных.Вставить("ТестируемыйКлиентПредставление",ТестируемыйКлиент.Наименование);
	СтруктураДанных.Вставить("ТипОбъекта","Диаграмма");
	СтруктураДанных.Вставить("ВидГрафика","График");
	СтруктураДанных.Вставить("ВидПодписей","Значение");
	СтруктураДанных.Вставить("ОтображатьЛегендуГоризонтальная",Истина);	
	СтруктураДанных.Вставить("МассивПакетовТочек",новый Массив);
	СтруктураДанных.Вставить("МассивСерий",новый Массив);
	СтруктураДанных.МассивСерий.Добавить(новый структура("Серия,Цвет","Продолжительность",новый Структура("R,G,B",50,50,215)));
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 7
	|	ПротоколыВыполненияТестов.Проверка КАК Проверка
	|ПОМЕСТИТЬ ВтПоследниеПятьПроверок
	|ИЗ
	|	РегистрСведений.ПротоколыВыполненияТестов КАК ПротоколыВыполненияТестов
	|ГДЕ
	|	ПротоколыВыполненияТестов.ТестируемыйКлиент = &ТестируемыйКлиент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Проверка.Код УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПротоколыВыполненияТестов.Проверка КАК Проверка,
	|	ПротоколыВыполненияТестов.ТестируемыйКлиент КАК ТестируемыйКлиент,
	|	СУММА(ПротоколыВыполненияТестов.КоличествоТестовыхСлучаев) КАК КоличествоТестовыхСлучаев,
	|	СУММА(ПротоколыВыполненияТестов.КоличествоПровалов) КАК КоличествоПровалов,
	|	СУММА(ПротоколыВыполненияТестов.КоличествоОшибок) КАК КоличествоОшибок,
	|	СУММА(ПротоколыВыполненияТестов.КоличествоПропущенных) КАК КоличествоПропущенных,
	|	СУММА(ПротоколыВыполненияТестов.КоличествоТестовыхСлучаев - ПротоколыВыполненияТестов.КоличествоПровалов - ПротоколыВыполненияТестов.КоличествоОшибок - ПротоколыВыполненияТестов.КоличествоПропущенных) КАК КоличествоУспешных,
	|	СУММА(ПротоколыВыполненияТестов.ВремяВыполнения) КАК ВремяВыполнения
	|ИЗ
	|	РегистрСведений.ПротоколыВыполненияТестов КАК ПротоколыВыполненияТестов
	|ГДЕ
	|	ПротоколыВыполненияТестов.ТестируемыйКлиент = &ТестируемыйКлиент
	|	И ПротоколыВыполненияТестов.Проверка В
	|			(ВЫБРАТЬ
	|				ВтПоследниеПятьПроверок.Проверка
	|			ИЗ
	|				ВтПоследниеПятьПроверок)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПротоколыВыполненияТестов.Проверка,
	|	ПротоколыВыполненияТестов.ТестируемыйКлиент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Проверка";
	Запрос.УстановитьПараметр("ТестируемыйКлиент",ТестируемыйКлиент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		МассивТочекСерий = новый Массив;
		СтруктураДанных.МассивПакетовТочек.Добавить(МассивТочекСерий);		
		МассивТочекСерий.Добавить(новый Структура("Серия,Точка,Значение","Продолжительность",Строка(Выборка.Проверка),Выборка.ВремяВыполнения));
		
	КонецЦикла;
	
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция ПолучитьИсториюКоличестваТестов(Знач ТестируемыйКлиент) Экспорт
	
	Проверка = ПолучитьПоследнююПроверкуДляТестируемогоКлиента(ТестируемыйКлиент);
	
	
	СтруктураДанных = новый Структура;
	СтруктураДанных.Вставить("Проверка",Строка(Проверка));
	СтруктураДанных.Вставить("ДатаНачала",Проверка.ДатаНачала);
	СтруктураДанных.Вставить("ДатаНачалаСтрокой",Строка(Формат(Проверка.ДатаНачала,"ДЛФ=DDT")));
	СтруктураДанных.Вставить("ТестируемыйКлиентID",ТестируемыйКлиент.ID);
	СтруктураДанных.Вставить("ТестируемыйКлиентПредставление",ТестируемыйКлиент.Наименование);
	СтруктураДанных.Вставить("ТипОбъекта","Диаграмма");
	СтруктураДанных.Вставить("ВидГрафика","График");
	СтруктураДанных.Вставить("ВидПодписей","Значение");
	СтруктураДанных.Вставить("МассивПакетовТочек",новый Массив);
	СтруктураДанных.Вставить("МассивСерий",новый Массив);
	СтруктураДанных.МассивСерий.Добавить(новый структура("Серия,Цвет","КоличествоТестовыхСлучаев",новый Структура("R,G,B",50,50,215)));
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 7
	|	ПротоколыВыполненияТестов.Проверка КАК Проверка
	|ПОМЕСТИТЬ ВтПоследниеПятьПроверок
	|ИЗ
	|	РегистрСведений.ПротоколыВыполненияТестов КАК ПротоколыВыполненияТестов
	|ГДЕ
	|	ПротоколыВыполненияТестов.ТестируемыйКлиент = &ТестируемыйКлиент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Проверка.Код УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПротоколыВыполненияТестов.Проверка КАК Проверка,
	|	ПротоколыВыполненияТестов.ТестируемыйКлиент КАК ТестируемыйКлиент,
	|	СУММА(ПротоколыВыполненияТестов.КоличествоТестовыхСлучаев) КАК КоличествоТестовыхСлучаев,
	|	СУММА(ПротоколыВыполненияТестов.КоличествоПровалов) КАК КоличествоПровалов,
	|	СУММА(ПротоколыВыполненияТестов.КоличествоОшибок) КАК КоличествоОшибок,
	|	СУММА(ПротоколыВыполненияТестов.КоличествоПропущенных) КАК КоличествоПропущенных,
	|	СУММА(ПротоколыВыполненияТестов.КоличествоТестовыхСлучаев - ПротоколыВыполненияТестов.КоличествоПровалов - ПротоколыВыполненияТестов.КоличествоОшибок - ПротоколыВыполненияТестов.КоличествоПропущенных) КАК КоличествоУспешных,
	|	СУММА(ПротоколыВыполненияТестов.ВремяВыполнения) КАК ВремяВыполнения
	|ИЗ
	|	РегистрСведений.ПротоколыВыполненияТестов КАК ПротоколыВыполненияТестов
	|ГДЕ
	|	ПротоколыВыполненияТестов.ТестируемыйКлиент = &ТестируемыйКлиент
	|	И ПротоколыВыполненияТестов.Проверка В
	|			(ВЫБРАТЬ
	|				ВтПоследниеПятьПроверок.Проверка
	|			ИЗ
	|				ВтПоследниеПятьПроверок)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПротоколыВыполненияТестов.Проверка,
	|	ПротоколыВыполненияТестов.ТестируемыйКлиент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Проверка";
	Запрос.УстановитьПараметр("ТестируемыйКлиент",ТестируемыйКлиент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		МассивТочекСерий = новый Массив;
		СтруктураДанных.МассивПакетовТочек.Добавить(МассивТочекСерий);		
		МассивТочекСерий.Добавить(новый Структура("Серия,Точка,Значение","КоличествоТестовыхСлучаев",Строка(Выборка.Проверка),Выборка.КоличествоТестовыхСлучаев));
		
	КонецЦикла;
	
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция ПолучитьСерьезностьДефектов(ТестируемыйКлиент) Экспорт
	
	Проверка = ПолучитьПоследнююПроверкуДляТестируемогоКлиента(ТестируемыйКлиент);
	
	КоличествоОшибок = 0;
	КоличествоПропущенных = 0;
	КоличествоУспешных = 0;
	КоличествоТестовыхСлучаев = 1;
	
	СтруктураДанных = новый Структура;
	СтруктураДанных.Вставить("Проверка",Строка(Проверка));
	СтруктураДанных.Вставить("ДатаНачала",Проверка.ДатаНачала);
	СтруктураДанных.Вставить("ДатаНачалаСтрокой",Строка(Формат(Проверка.ДатаНачала,"ДЛФ=DDT")));
	СтруктураДанных.Вставить("ТестируемыйКлиентID",ТестируемыйКлиент.ID);
	СтруктураДанных.Вставить("ТестируемыйКлиентПредставление",ТестируемыйКлиент.Наименование);
	СтруктураДанных.Вставить("ТипОбъекта","Диаграмма");
	СтруктураДанных.Вставить("ВидГрафика","Гистограмма");
	СтруктураДанных.Вставить("ВидГрафикаГоризонтальная","ГистограммаГоризонтальная");
	СтруктураДанных.Вставить("ВидПодписей","Значение");
	СтруктураДанных.Вставить("ОтображатьЛегенду",Ложь);
	СтруктураДанных.Вставить("МассивПакетовТочек",новый Массив);
	СтруктураДанных.Вставить("МассивСерий",новый Массив);
	СтруктураДанных.МассивСерий.Добавить(новый структура("Серия","Серьезность"));
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Т.Проверка,
	|	Т.ТестируемыйКлиент,
	|	Т.Тест,
	|	Т.РезультатВыполнения,
	|	Т.ОписаниеОшибки,
	|	Т.ДатаВыполенения,
	|	Т.НомерПоПорядку,
	|	Т.КоличествоТестовыхСлучаев,
	|	Т.КоличествоПровалов,
	|	Т.КоличествоОшибок,
	|	Т.КоличествоПропущенных,
	|	Т.ВремяВыполнения,
	|	ВЫБОР
	|		КОГДА Т.СерьезностьДефекта = ЗНАЧЕНИЕ(Перечисление.ВариантыСерьезностиДефектов.ПустаяСсылка)
	|			ТОГДА Т.Тест.СерьезностьДефекта
	|		КОГДА Т.Тест <> ЗНАЧЕНИЕ(Перечисление.ВариантыСерьезностиДефектов.ПустаяСсылка)
	|			ТОГДА Т.Тест.СерьезностьДефекта
	|		ИНАЧЕ Т.СерьезностьДефекта
	|	КОНЕЦ КАК СерьезностьДефекта
	|ПОМЕСТИТЬ ВтПоследниеПроверки
	|ИЗ
	|	РегистрСведений.ПротоколыВыполненияТестов КАК Т
	|ГДЕ
	|	Т.ТестируемыйКлиент = &ТестируемыйКлиент
	|	И Т.Проверка = &Проверка
	|	И Т.РезультатВыполнения В (ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияШагов.Провал), ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияШагов.Ошибка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВтПоследниеПроверки.КоличествоТестовыхСлучаев) КАК КоличествоТестовыхСлучаев,
	|	ВтПоследниеПроверки.СерьезностьДефекта,
	|	ВЫБОР
	|		КОГДА ВтПоследниеПроверки.СерьезностьДефекта = ЗНАЧЕНИЕ(Перечисление.ВариантыСерьезностиДефектов.Блокирующая)
	|			ТОГДА 5
	|		КОГДА ВтПоследниеПроверки.СерьезностьДефекта = ЗНАЧЕНИЕ(Перечисление.ВариантыСерьезностиДефектов.Критическая)
	|			ТОГДА 4
	|		КОГДА ВтПоследниеПроверки.СерьезностьДефекта = ЗНАЧЕНИЕ(Перечисление.ВариантыСерьезностиДефектов.Значительная)
	|			ТОГДА 3
	|		КОГДА ВтПоследниеПроверки.СерьезностьДефекта = ЗНАЧЕНИЕ(Перечисление.ВариантыСерьезностиДефектов.Незначительная)
	|			ТОГДА 2
	|		КОГДА ВтПоследниеПроверки.СерьезностьДефекта = ЗНАЧЕНИЕ(Перечисление.ВариантыСерьезностиДефектов.Тривиальная)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК порядок
	|ПОМЕСТИТЬ ВтДефекты
	|ИЗ
	|	ВтПоследниеПроверки КАК ВтПоследниеПроверки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтПоследниеПроверки.СерьезностьДефекта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	ЗНАЧЕНИЕ(Перечисление.ВариантыСерьезностиДефектов.Блокирующая),
	|	5
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	ЗНАЧЕНИЕ(Перечисление.ВариантыСерьезностиДефектов.Критическая),
	|	4
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	ЗНАЧЕНИЕ(Перечисление.ВариантыСерьезностиДефектов.Значительная),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	ЗНАЧЕНИЕ(Перечисление.ВариантыСерьезностиДефектов.Незначительная),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	ЗНАЧЕНИЕ(Перечисление.ВариантыСерьезностиДефектов.Тривиальная),
	|	1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВтДефекты.КоличествоТестовыхСлучаев) КАК КоличествоТестовыхСлучаев,
	|	ВтДефекты.СерьезностьДефекта,
	|	ВтДефекты.порядок КАК порядок
	|ИЗ
	|	ВтДефекты КАК ВтДефекты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтДефекты.СерьезностьДефекта,
	|	ВтДефекты.порядок
	|
	|УПОРЯДОЧИТЬ ПО
	|	порядок УБЫВ";
	Запрос.УстановитьПараметр("ТестируемыйКлиент",ТестируемыйКлиент);
	Запрос.УстановитьПараметр("Проверка",Проверка);
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Цвет = новый Структура("R,G,B",255,255,255);
		КоличествоТестовыхСлучаев = Выборка.КоличествоТестовыхСлучаев;
		Если НЕ ЗначениеЗаполнено(Выборка.СерьезностьДефекта) Тогда
			СерьезностьДефекта = "Неопределена";
		Иначе
			СерьезностьДефекта = Строка(Выборка.СерьезностьДефекта);
		КонецЕсли;
		
		Если Выборка.СерьезностьДефекта=Перечисления.ВариантыСерьезностиДефектов.Блокирующая тогда
			Цвет = новый Структура("R,G,B",255,50,50);
		ИначеЕсли Выборка.СерьезностьДефекта=Перечисления.ВариантыСерьезностиДефектов.Критическая тогда
			Цвет = новый Структура("R,G,B",255,165,15);
		ИначеЕсли Выборка.СерьезностьДефекта=Перечисления.ВариантыСерьезностиДефектов.Значительная тогда
			Цвет = новый Структура("R,G,B",255,250,150);
		ИначеЕсли  НЕ ЗначениеЗаполнено(Выборка.СерьезностьДефекта) Тогда
			Цвет = новый Структура("R,G,B",195,195,195);
		КонецЕсли;   		
		
		МассивТочекСерий = новый Массив;
		СтруктураДанных.МассивПакетовТочек.Добавить(МассивТочекСерий);		
		МассивТочекСерий.Добавить(новый Структура("Серия,Точка,Значение,Цвет","Серьезность",Строка(СерьезностьДефекта),КоличествоТестовыхСлучаев,Цвет));
		
		
	КонецЦикла;
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция ПолучитьПродолжительность(ТестируемыйКлиент) Экспорт
	
	Проверка = ПолучитьПоследнююПроверкуДляТестируемогоКлиента(ТестируемыйКлиент);
	
	
	СтруктураДанных = новый Структура;
	СтруктураДанных.Вставить("Проверка",Строка(Проверка));
	СтруктураДанных.Вставить("ДатаНачала",Проверка.ДатаНачала);
	СтруктураДанных.Вставить("ДатаНачалаСтрокой",Строка(Формат(Проверка.ДатаНачала,"ДЛФ=DDT")));
	СтруктураДанных.Вставить("ТестируемыйКлиентID",ТестируемыйКлиент.ID);
	СтруктураДанных.Вставить("ТестируемыйКлиентПредставление",ТестируемыйКлиент.Наименование);
	СтруктураДанных.Вставить("ТипОбъекта","Диаграмма");
	СтруктураДанных.Вставить("ОтображатьЛегенду",Ложь);
	СтруктураДанных.Вставить("ВидГрафика","ГистограммаГоризонтальная");
	СтруктураДанных.Вставить("ВидГрафикаГоризонтальная","Гистограмма");
	СтруктураДанных.Вставить("ВидПодписей","Значение");
	СтруктураДанных.Вставить("МассивПакетовТочек",новый Массив);
	СтруктураДанных.Вставить("МассивСерий",новый Массив);
	СтруктураДанных.МассивСерий.Добавить(новый структура("Серия,Цвет","Продолжительность",новый Структура("R,G,B",50,50,215)));
	
	
	Продолжительность = 0;                 
	КоличествоТестовыхСлучаев = 1;
	
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Т.Проверка,
	|	Т.ТестируемыйКлиент,
	|	Т.Тест,
	|	Т.РезультатВыполнения,
	|	Т.ОписаниеОшибки,
	|	Т.ДатаВыполенения,
	|	Т.НомерПоПорядку,
	|	Т.КоличествоТестовыхСлучаев,
	|	Т.КоличествоПровалов,
	|	Т.КоличествоОшибок,
	|	Т.КоличествоПропущенных,
	|	Т.ВремяВыполнения
	|ПОМЕСТИТЬ ВтПоследниеПроверки
	|ИЗ
	|	РегистрСведений.ПротоколыВыполненияТестов КАК Т
	|ГДЕ
	|	Т.ТестируемыйКлиент = &ТестируемыйКлиент
	|	И Т.Проверка = &Проверка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтПоследниеПроверки.Проверка,
	|	ВтПоследниеПроверки.ТестируемыйКлиент,
	|	СУММА(ВтПоследниеПроверки.КоличествоТестовыхСлучаев) КАК КоличествоТестовыхСлучаев,
	|	ВтПоследниеПроверки.ВремяВыполнения КАК Продолжительность
	|ИЗ
	|	ВтПоследниеПроверки КАК ВтПоследниеПроверки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтПоследниеПроверки.Проверка,
	|	ВтПоследниеПроверки.ТестируемыйКлиент,
	|	ВтПоследниеПроверки.ВремяВыполнения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Продолжительность";
	Запрос.УстановитьПараметр("ТестируемыйКлиент",ТестируемыйКлиент);
	Запрос.УстановитьПараметр("Проверка",Проверка);
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		КоличествоТестовыхСлучаев = Выборка.КоличествоТестовыхСлучаев;
		Если Продолжительность>5 Тогда
			Продолжительность = Окр(Выборка.Продолжительность,0,РежимОкругления.Окр15как20);
		Иначе
			Продолжительность = Окр(Выборка.Продолжительность,1,РежимОкругления.Окр15как20);
		КонецЕсли;
		
		
		МассивТочекСерий = новый Массив;
		СтруктураДанных.МассивПакетовТочек.Добавить(МассивТочекСерий);		
		МассивТочекСерий.Добавить(новый Структура("Серия,Точка,Значение","Продолжительность",Продолжительность,КоличествоТестовыхСлучаев));
		
		
	КонецЦикла;
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция СформироватьДиаграммуСтатусы(ТестируемыйКлиент) Экспорт
	
	Проверка = ПолучитьПоследнююПроверкуДляТестируемогоКлиента(ТестируемыйКлиент);
	
	
	СтруктураДанных = новый Структура;
	СтруктураДанных.Вставить("Проверка",Строка(Проверка));
	СтруктураДанных.Вставить("ДатаНачала",Проверка.ДатаНачала);
	СтруктураДанных.Вставить("ДатаНачалаСтрокой",Строка(Формат(Проверка.ДатаНачала,"ДЛФ=DDT")));
	СтруктураДанных.Вставить("ТестируемыйКлиентID",ТестируемыйКлиент.ID);
	СтруктураДанных.Вставить("ТестируемыйКлиентПредставление",ТестируемыйКлиент.Наименование);
	СтруктураДанных.Вставить("ТипОбъекта","Диаграмма");
	СтруктураДанных.Вставить("ВидГрафика","Гистограмма");
	СтруктураДанных.Вставить("ВидГрафикаГоризонтальная","Круговая");
	СтруктураДанных.Вставить("ОтображатьЛегенду",Ложь);
	СтруктураДанных.Вставить("ОтображатьЛегендуГоризонтальная",Истина);
	СтруктураДанных.Вставить("ВидПодписей","СерияПроцент");
	СтруктураДанных.Вставить("МассивПакетовТочек",новый Массив);
	СтруктураДанных.Вставить("МассивСерий",новый Массив);
	СтруктураДанных.МассивСерий.Добавить(новый структура("Серия,Цвет","Падения",новый Структура("R,G,B",255,50,50)));
	СтруктураДанных.МассивСерий.Добавить(новый структура("Серия,Цвет","Ошибки",новый Структура("R,G,B",255,165,15)));
	СтруктураДанных.МассивСерий.Добавить(новый структура("Серия,Цвет","Пропуски",новый Структура("R,G,B",195,195,195)));
	СтруктураДанных.МассивСерий.Добавить(новый структура("Серия,Цвет","Успешно",новый Структура("R,G,B",50,195,50)));	
	
	КоличествоПровалов = 0;
	КоличествоОшибок = 0;
	КоличествоПропущенных = 0;
	КоличествоУспешных = 0;
	КоличествоТестовыхСлучаев = 1;
	
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Т.Проверка,
	|	Т.ТестируемыйКлиент,
	|	Т.Тест,
	|	Т.РезультатВыполнения,
	|	Т.ОписаниеОшибки,
	|	Т.ДатаВыполенения,
	|	Т.НомерПоПорядку,
	|	Т.КоличествоТестовыхСлучаев,
	|	Т.КоличествоПровалов,
	|	Т.КоличествоОшибок,
	|	Т.КоличествоПропущенных,
	|	Т.ВремяВыполнения
	|ПОМЕСТИТЬ ВтПоследниеПроверки
	|ИЗ
	|	РегистрСведений.ПротоколыВыполненияТестов КАК Т
	|ГДЕ
	|	Т.ТестируемыйКлиент = &ТестируемыйКлиент
	|	И Т.Проверка = &Проверка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтПоследниеПроверки.ТестируемыйКлиент,
	|	ВтПоследниеПроверки.Проверка,
	|	СУММА(ВтПоследниеПроверки.КоличествоТестовыхСлучаев) КАК КоличествоТестовыхСлучаев,
	|	СУММА(ВтПоследниеПроверки.КоличествоПровалов) КАК КоличествоПровалов,
	|	СУММА(ВтПоследниеПроверки.КоличествоОшибок) КАК КоличествоОшибок,
	|	СУММА(ВтПоследниеПроверки.КоличествоПропущенных) КАК КоличествоПропущенных,
	|	СУММА(ВтПоследниеПроверки.КоличествоТестовыхСлучаев - ВтПоследниеПроверки.КоличествоПровалов - ВтПоследниеПроверки.КоличествоОшибок - ВтПоследниеПроверки.КоличествоПропущенных) КАК КоличествоУспешных
	|ИЗ
	|	ВтПоследниеПроверки КАК ВтПоследниеПроверки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтПоследниеПроверки.Проверка,
	|	ВтПоследниеПроверки.ТестируемыйКлиент";
	
	Запрос.УстановитьПараметр("ТестируемыйКлиент",ТестируемыйКлиент);
	Запрос.УстановитьПараметр("Проверка",Проверка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		КоличествоТестовыхСлучаев = Выборка.КоличествоТестовыхСлучаев;
		Если КоличествоТестовыхСлучаев<>0 Тогда
			КоличествоПровалов = Выборка.КоличествоПровалов/КоличествоТестовыхСлучаев*100;
			КоличествоОшибок = Выборка.КоличествоОшибок/КоличествоТестовыхСлучаев*100;
			КоличествоПропущенных = Выборка.КоличествоПропущенных/КоличествоТестовыхСлучаев*100;
			КоличествоУспешных = Выборка.КоличествоУспешных/КоличествоТестовыхСлучаев*100;
		КонецЕсли;
	КонецЕсли;
	
	
	// вставляем массив точек серий
	МассивТочекСерий = новый Массив;
	СтруктураДанных.МассивПакетовТочек.Добавить(МассивТочекСерий);		
	
	МассивТочекСерий.Добавить(новый Структура("Серия,Точка,Значение","Падения",Строка(Проверка),КоличествоПровалов));
	МассивТочекСерий.Добавить(новый Структура("Серия,Точка,Значение","Ошибки",Строка(Проверка),КоличествоОшибок));
	МассивТочекСерий.Добавить(новый Структура("Серия,Точка,Значение","Пропуски",Строка(Проверка),КоличествоПропущенных));
	МассивТочекСерий.Добавить(новый Структура("Серия,Точка,Значение","Успешно",Строка(Проверка),КоличествоУспешных));
	
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция СформироватьДиаграммуСоотношениеТестов(Знач ТестируемыйКлиент) Экспорт
	
	Проверка = ПолучитьПоследнююПроверкуДляТестируемогоКлиента(ТестируемыйКлиент);
	
	
	СтруктураДанных = новый Структура;
	СтруктураДанных.Вставить("Проверка",Строка(Проверка));
	СтруктураДанных.Вставить("ДатаНачала",Проверка.ДатаНачала);
	СтруктураДанных.Вставить("ДатаНачалаСтрокой",Строка(Формат(Проверка.ДатаНачала,"ДЛФ=DDT")));
	СтруктураДанных.Вставить("ТестируемыйКлиентID",ТестируемыйКлиент.ID);
	СтруктураДанных.Вставить("ТестируемыйКлиентПредставление",ТестируемыйКлиент.Наименование);
	СтруктураДанных.Вставить("ТипОбъекта","Диаграмма");
	СтруктураДанных.Вставить("ВидГрафика","Гистограмма");
	СтруктураДанных.Вставить("ВидГрафикаГоризонтальная","Гистограмма");
	СтруктураДанных.Вставить("ОтображатьЛегенду",Ложь);
	СтруктураДанных.Вставить("ОтображатьЛегендуГоризонтальная",Истина);
	СтруктураДанных.Вставить("ВидПодписей","Значение");
	СтруктураДанных.Вставить("МассивПакетовТочек",новый Массив);
	СтруктураДанных.Вставить("МассивСерий",новый Массив);
	СтруктураДанных.МассивСерий.Добавить(новый структура("Серия,Цвет","Было",новый Структура("R,G,B",205,205,205)));
	СтруктураДанных.МассивСерий.Добавить(новый структура("Серия,Цвет","Стало",новый Структура("R,G,B",235,175,115)));
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
	|	ПротоколыВыполненияТестов.Проверка КАК Проверка
	|ПОМЕСТИТЬ ВтПоследниеДвеПроверки
	|ИЗ
	|	РегистрСведений.ПротоколыВыполненияТестов КАК ПротоколыВыполненияТестов
	|ГДЕ
	|	ПротоколыВыполненияТестов.ТестируемыйКлиент = &ТестируемыйКлиент
	|	И ПротоколыВыполненияТестов.Проверка <= &Проверка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПротоколыВыполненияТестов.Проверка.Код УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Проверка,
	|	Т.ТестируемыйКлиент,
	|	СУММА(Т.КоличествоТестовыхСлучаев) КАК КоличествоТестовыхСлучаев,
	|	СУММА(Т.КоличествоПровалов) КАК КоличествоПровалов,
	|	СУММА(Т.КоличествоОшибок) КАК КоличествоОшибок,
	|	СУММА(Т.КоличествоПропущенных) КАК КоличествоПропущенных,
	|	СУММА(Т.ВремяВыполнения) КАК ВремяВыполнения
	|ИЗ
	|	РегистрСведений.ПротоколыВыполненияТестов КАК Т
	|ГДЕ
	|	Т.ТестируемыйКлиент = &ТестируемыйКлиент
	|	И Т.Проверка В
	|			(ВЫБРАТЬ
	|				ВтПоследниеДвеПроверки.Проверка
	|			ИЗ
	|				ВтПоследниеДвеПроверки)
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.ТестируемыйКлиент,
	|	Т.Проверка";
	
	Запрос.УстановитьПараметр("ТестируемыйКлиент",ТестируемыйКлиент);
	Запрос.УстановитьПараметр("Проверка",Проверка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// вставляем массив точек серий
		МассивТочекСерий = новый Массив;
		СтруктураДанных.МассивПакетовТочек.Добавить(МассивТочекСерий);		
		
		
		Если НЕ Выборка.Проверка=Проверка Тогда
			МассивТочекСерий.Добавить(новый Структура("Серия,Точка,Значение","Было","Провалов",Выборка.КоличествоПровалов));
			МассивТочекСерий.Добавить(новый Структура("Серия,Точка,Значение","Было","Ошибок",Выборка.КоличествоОшибок));
		Иначе		
			МассивТочекСерий.Добавить(новый Структура("Серия,Точка,Значение","Стало","Провалов",Выборка.КоличествоПровалов));
			МассивТочекСерий.Добавить(новый Структура("Серия,Точка,Значение","Стало","Ошибок",Выборка.КоличествоОшибок));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураДанных;	
	
КонецФункции

#конецОбласти

#Область Таблицы

Функция ПолучитьИсториюВыполнения(Знач ТестируемыйКлиент) Экспорт
	
	Проверка = ПолучитьПоследнююПроверкуДляТестируемогоКлиента(ТестируемыйКлиент);
	
	СтруктураДанных = новый Структура;
	СтруктураДанных.Вставить("Проверка",Строка(Проверка));
	СтруктураДанных.Вставить("ДатаНачала",Проверка.ДатаНачала);
	СтруктураДанных.Вставить("ДатаНачалаСтрокой",Строка(Формат(Проверка.ДатаНачала,"ДЛФ=DDT")));
	СтруктураДанных.Вставить("ДатаНачалаСтрокой",Строка(Формат(Проверка.ДатаНачала,"ДЛФ=DDT")));
	СтруктураДанных.Вставить("ТестируемыйКлиентID",ТестируемыйКлиент.ID);
	СтруктураДанных.Вставить("ТестируемыйКлиентПредставление",ТестируемыйКлиент.Наименование);
	СтруктураДанных.Вставить("ТипОбъекта","Таблица");
	СтруктураДанных.Вставить("ПолеФильтра","ИндексКартинки_5");
	СтруктураДанных.Вставить("МассивСтрокТаблицы",новый Массив);
	СтруктураДанных.Вставить("МассивКолонок",новый Массив);
	
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 5
	|	ПротоколыВыполненияТестов.Проверка КАК Проверка
	|ПОМЕСТИТЬ ВтПоследниеПятьПроверок
	|ИЗ
	|	РегистрСведений.ПротоколыВыполненияТестов КАК ПротоколыВыполненияТестов
	|ГДЕ
	|	ПротоколыВыполненияТестов.ТестируемыйКлиент = &ТестируемыйКлиент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПротоколыВыполненияТестов.Проверка.Код УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПротоколыВыполненияТестов.ТестируемыйКлиент КАК ТестируемыйКлиент,
	|	ПротоколыВыполненияТестов.Тест КАК Тест,
	|	ПротоколыВыполненияТестов.Тест.ID КАК ТестID,
	|	ПротоколыВыполненияТестов.ВремяВыполнения КАК Продолжительность,
	|	ПротоколыВыполненияТестов.Проверка КАК Проверка,
	|	ВЫБОР
	|		КОГДА ПротоколыВыполненияТестов.КоличествоПровалов > 0
	|			ТОГДА 4
	|		КОГДА ПротоколыВыполненияТестов.КоличествоПровалов = 0
	|				И ПротоколыВыполненияТестов.КоличествоОшибок > 0
	|			ТОГДА 3
	|		КОГДА ПротоколыВыполненияТестов.КоличествоПровалов = 0
	|				И ПротоколыВыполненияТестов.КоличествоОшибок = 0
	|				И ПротоколыВыполненияТестов.КоличествоПропущенных < ПротоколыВыполненияТестов.КоличествоТестовыхСлучаев
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИндексКартинки,
	|	ЕСТЬNULL(СинонимыТестов.Синоним, """") КАК ТестСиноним
	|ИЗ
	|	РегистрСведений.ПротоколыВыполненияТестов КАК ПротоколыВыполненияТестов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СинонимыТестов КАК СинонимыТестов
	|		ПО ПротоколыВыполненияТестов.Тест = СинонимыТестов.Тест
	|ГДЕ
	|	ПротоколыВыполненияТестов.ТестируемыйКлиент = &ТестируемыйКлиент
	|	И ПротоколыВыполненияТестов.Проверка В
	|			(ВЫБРАТЬ
	|				ВтПоследниеПятьПроверок.Проверка
	|			ИЗ
	|				ВтПоследниеПятьПроверок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПротоколыВыполненияТестов.Проверка.Код
	|ИТОГИ ПО
	|	Проверка";
	
	
	Запрос.УстановитьПараметр("ТестируемыйКлиент",ТестируемыйКлиент);
	
	Массив = новый Массив;
	Массив.Добавить(Тип("Строка"));
	Массив.Добавить(Тип("СправочникСсылка.Тесты"));
	
	ТаблицаИсторияВыполнения = новый ТаблицаЗначений;                                                  
	ТаблицаИсторияВыполнения.Колонки.Добавить("Тест",новый ОписаниеТипов(Массив),"Тест");
	ТаблицаИсторияВыполнения.Колонки.Добавить("ТестID",новый ОписаниеТипов("Строка"),"ТестID");
	ТаблицаИсторияВыполнения.Колонки.Добавить("ТестСиноним",новый ОписаниеТипов("Строка"),"Тест");
	ТаблицаИсторияВыполнения.Колонки.Добавить("ТестируемыйКлиент",новый ОписаниеТипов("СправочникСсылка.ТестируемыеКлиенты"),"Тестируемый клиент");
	//ТаблицаИсторияВыполнения.Колонки.Добавить("РезультатВыполнения_1",новый ОписаниеТипов("ПеречислениеСсылка.РезультатыВыполненияШагов"));
	ТаблицаИсторияВыполнения.Колонки.Добавить("ИндексКартинки_1",новый ОписаниеТипов("Число"));
	//ТаблицаИсторияВыполнения.Колонки.Добавить("РезультатВыполнения_2",новый ОписаниеТипов("ПеречислениеСсылка.РезультатыВыполненияШагов"));
	ТаблицаИсторияВыполнения.Колонки.Добавить("ИндексКартинки_2",новый ОписаниеТипов("Число"));
	//ТаблицаИсторияВыполнения.Колонки.Добавить("РезультатВыполнения_3",новый ОписаниеТипов("ПеречислениеСсылка.РезультатыВыполненияШагов"));
	ТаблицаИсторияВыполнения.Колонки.Добавить("ИндексКартинки_3",новый ОписаниеТипов("Число"));
	//ТаблицаИсторияВыполнения.Колонки.Добавить("РезультатВыполнения_4",новый ОписаниеТипов("ПеречислениеСсылка.РезультатыВыполненияШагов"));
	ТаблицаИсторияВыполнения.Колонки.Добавить("ИндексКартинки_4",новый ОписаниеТипов("Число"));
	//ТаблицаИсторияВыполнения.Колонки.Добавить("РезультатВыполнения_5",новый ОписаниеТипов("ПеречислениеСсылка.РезультатыВыполненияШагов"));
	ТаблицаИсторияВыполнения.Колонки.Добавить("ИндексКартинки_5",новый ОписаниеТипов("Число"));

	
	ш=0;
	ВыборкаПроверки = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПроверки.Следующий() Цикл
		
		ш=ш+1;
		Выборка = ВыборкаПроверки.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			мОтбор = новый Структура("Тест,ТестируемыйКлиент",Выборка.Тест,Выборка.ТестируемыйКлиент);
			
			н_строки = ТаблицаИсторияВыполнения.НайтиСтроки(мОтбор);
			
			Если н_строки.Количество()=0 Тогда
				стр_н = ТаблицаИсторияВыполнения.Добавить();
				ЗаполнитьЗначенияСвойств(стр_н,Выборка);
			Иначе
				стр_н = н_строки[0];
			КонецЕсли;
			
			ТаблицаИсторияВыполнения.Колонки["ИндексКартинки_"+ш].Заголовок = СтрЗаменить(Строка(Выборка.Проверка),Символы.НПП,"");

			стр_н["ИндексКартинки_"+ш] = Выборка.ИндексКартинки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаИсторияВыполнения.Колонки.Удалить("ТестируемыйКлиент");
	
	Для каждого колонка из ТаблицаИсторияВыполнения.Колонки Цикл
		СтруктураКолонки = новый Структура("Имя,Заголовок,ТипЗначения,Ширина,ИмяКартинки,Видимость,Служебное",колонка.Имя,колонка.Заголовок,Строка(колонка.ТипЗначения),1,"",Истина,Ложь);
		Если колонка.Имя="Тест" Тогда
			СтруктураКолонки.ТипЗначения = "Строка";
			СтруктураКолонки.Ширина=0;
			СтруктураКолонки.Видимость = Ложь;
		ИначеЕсли колонка.Имя="ТестСиноним" Тогда
			СтруктураКолонки.ТипЗначения = "Строка";
			СтруктураКолонки.Ширина=0;
			СтруктураКолонки.Вставить("АвтовысотаЯчейки",Истина);
		ИначеЕсли колонка.Имя="ТестID" Тогда
			СтруктураКолонки.Видимость = Ложь;
			СтруктураКолонки.Служебное = Истина;
		КонецЕсли;
		Если Найти(колонка.Имя,"ИндексКартинки") Тогда
			СтруктураКолонки.Вставить("ИмяКартинки","СтатусыЗаданий");
		КонецЕсли;	
		СтруктураДанных.МассивКолонок.Добавить(СтруктураКолонки);
	КонецЦикла;
	
	// сгенерим синонимы
	мОтбор = новый Структура("ТестСиноним","");
	без_синонимов = ТаблицаИсторияВыполнения.НайтиСтроки(мОтбор);
	
	Для каждого стр из без_синонимов Цикл 
		стр.ТестСиноним = СтроковыеФункцииКлиентСервер.РазбитьНаСловаПоЗаглавнымСимволамИСпецЗнакам(Строка(стр.Тест),"_");
		СценарноеТестированиеВызовСервера.УстановитьСинонимТеста(стр.Тест,стр.ТестСиноним);
	КонецЦикла;
	
	
	Для каждого стр из ТаблицаИсторияВыполнения Цикл
		
		СтруктураСтроки = новый Структура;
		Для каждого колонка из ТаблицаИсторияВыполнения.Колонки Цикл
			СтруктураСтроки.Вставить(колонка.Имя,стр[колонка.Имя]);
		КонецЦикла;
		СтруктураСтроки.Тест = Строка(СтруктураСтроки.Тест);		
		СтруктураДанных.МассивСтрокТаблицы.Добавить(СтруктураСтроки);
		
	КонецЦикла;
	
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция ПолучитьТаблицуСтабильностьВыполненияТестов(Знач ТестируемыйКлиент) Экспорт
	
	Проверка = ПолучитьПоследнююПроверкуДляТестируемогоКлиента(ТестируемыйКлиент);
	
	СтруктураДанных = новый Структура;
	СтруктураДанных.Вставить("Проверка",Строка(Проверка));
	СтруктураДанных.Вставить("ДатаНачала",Проверка.ДатаНачала);
	СтруктураДанных.Вставить("ДатаНачалаСтрокой",Строка(Формат(Проверка.ДатаНачала,"ДЛФ=DDT")));
	СтруктураДанных.Вставить("ТестируемыйКлиентID",ТестируемыйКлиент.ID);
	СтруктураДанных.Вставить("ТестируемыйКлиентПредставление",ТестируемыйКлиент.Наименование);
	СтруктураДанных.Вставить("ТипОбъекта","Таблица");
	СтруктураДанных.Вставить("ПолеФильтра","ИндексКартинки");
	СтруктураДанных.Вставить("МассивСтрокТаблицы",новый Массив);
	СтруктураДанных.Вставить("МассивКолонок",новый Массив);
	

	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 5
	|	ПротоколыВыполненияТестов.Проверка КАК Проверка
	|ПОМЕСТИТЬ ВтПоследниеПятьПроверок
	|ИЗ
	|	РегистрСведений.ПротоколыВыполненияТестов КАК ПротоколыВыполненияТестов
	|ГДЕ
	|	ПротоколыВыполненияТестов.ТестируемыйКлиент = &ТестируемыйКлиент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПротоколыВыполненияТестов.Проверка.Код УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВтПоследниеПятьПроверок.Проверка) КАК Проверка
	|ПОМЕСТИТЬ ВтМаксимальная
	|ИЗ
	|	ВтПоследниеПятьПроверок КАК ВтПоследниеПятьПроверок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПротоколыВыполненияТестов.ТестируемыйКлиент КАК ТестируемыйКлиент,
	|	ПротоколыВыполненияТестов.Тест КАК Тест,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПротоколыВыполненияТестов.Проверка = ВтМаксимальная.Проверка
	|				ТОГДА ПротоколыВыполненияТестов.ВремяВыполнения
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПоследняяПродолжительность,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПротоколыВыполненияТестов.Проверка = ВтМаксимальная.Проверка
	|				ТОГДА ВЫБОР
	|						КОГДА ПротоколыВыполненияТестов.КоличествоПровалов > 0
	|							ТОГДА 4
	|						КОГДА ПротоколыВыполненияТестов.КоличествоПровалов = 0
	|								И ПротоколыВыполненияТестов.КоличествоОшибок > 0
	|							ТОГДА 3
	|						КОГДА ПротоколыВыполненияТестов.КоличествоПровалов = 0
	|								И ПротоколыВыполненияТестов.КоличествоОшибок = 0
	|								И ПротоколыВыполненияТестов.КоличествоПропущенных < ПротоколыВыполненияТестов.КоличествоТестовыхСлучаев
	|							ТОГДА 1
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ИндексКартинки,
	|	СРЕДНЕЕ(ПротоколыВыполненияТестов.ВремяВыполнения) КАК СреднееВремяВыполнения,
	|	СУММА(ВЫБОР
	|			КОГДА ПротоколыВыполненияТестов.КоличествоПровалов > 0
	|					ИЛИ ПротоколыВыполненияТестов.КоличествоОшибок > 0
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ИндексКартинкиСтабильностиВыполнения
	|ПОМЕСТИТЬ ВтИтоговое
	|ИЗ
	|	РегистрСведений.ПротоколыВыполненияТестов КАК ПротоколыВыполненияТестов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтМаксимальная КАК ВтМаксимальная
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ПротоколыВыполненияТестов.ТестируемыйКлиент = &ТестируемыйКлиент
	|	И ПротоколыВыполненияТестов.Проверка В
	|			(ВЫБРАТЬ
	|				ВтПоследниеПятьПроверок.Проверка
	|			ИЗ
	|				ВтПоследниеПятьПроверок)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПротоколыВыполненияТестов.ТестируемыйКлиент,
	|	ПротоколыВыполненияТестов.Тест
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтИтоговое.ТестируемыйКлиент КАК ТестируемыйКлиент,
	|	ВтИтоговое.Тест КАК Тест,
	|	ВтИтоговое.Тест.ID КАК ТестID,
	|	ЕСТЬNULL(СинонимыТестов.Синоним, """") КАК ТестСиноним,
	|	ВтИтоговое.ПоследняяПродолжительность КАК ПоследняяПродолжительность,
	|	ВтИтоговое.ИндексКартинки КАК ИндексКартинки,
	|	ВтИтоговое.СреднееВремяВыполнения КАК СреднееВремяВыполнения,
	|	ВтИтоговое.ИндексКартинкиСтабильностиВыполнения КАК ИндексКартинкиСтабильностиВыполнения
	|ИЗ
	|	ВтИтоговое КАК ВтИтоговое
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СинонимыТестов КАК СинонимыТестов
	|		ПО ВтИтоговое.Тест = СинонимыТестов.Тест";
	
	
	Запрос.УстановитьПараметр("ТестируемыйКлиент",ТестируемыйКлиент);
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Массив = новый Массив;
	Массив.Добавить(Тип("Строка"));
	Массив.Добавить(Тип("СправочникСсылка.Тесты"));
	ОписаниеТиповТест = новый ОписаниеТипов(Массив);
	
	КЧ = Новый КвалификаторыЧисла(12,1);
	КС = Новый КвалификаторыСтроки(20);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
	Массив.Очистить();
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,КЧ);
	
	
	ТаблицаСтабильностьВыполненияТестов = новый ТаблицаЗначений;                                                  
	ТаблицаСтабильностьВыполненияТестов.Колонки.Добавить("Тест",ОписаниеТиповТест,"Тест");
	ТаблицаСтабильностьВыполненияТестов.Колонки.Добавить("ТестID",новый ОписаниеТипов("Строка"),"ТестID");
	ТаблицаСтабильностьВыполненияТестов.Колонки.Добавить("ТестСиноним",новый ОписаниеТипов("Строка"),"Тест");
	ТаблицаСтабильностьВыполненияТестов.Колонки.Добавить("ТестируемыйКлиент",новый ОписаниеТипов("СправочникСсылка.ТестируемыеКлиенты"),"Тестируемый клиент");
	ТаблицаСтабильностьВыполненияТестов.Колонки.Добавить("ИндексКартинки",новый ОписаниеТипов("Число"));
	ТаблицаСтабильностьВыполненияТестов.Колонки.Добавить("ИндексКартинкиСтабильностиВыполнения",новый ОписаниеТипов("Число"));
	ТаблицаСтабильностьВыполненияТестов.Колонки.Добавить("СтабильностьВыполнения",новый ОписаниеТипов("ПеречислениеСсылка.СтабильностьВыполненияЗаданий"),"Стабильность");
	ТаблицаСтабильностьВыполненияТестов.Колонки.Добавить("ПоследняяПродолжительность",ОписаниеТиповЧ,"Т посл");
	ТаблицаСтабильностьВыполненияТестов.Колонки.Добавить("СреднееВремяВыполнения",ОписаниеТиповЧ,"Т сред");
	ТаблицаСтабильностьВыполненияТестов.Колонки.Добавить("ПоследнийРезультатВыполнения",новый ОписаниеТипов("ПеречислениеСсылка.РезультатыВыполненияШагов"));
	
	
	
	Для каждого стр из ТаблицаРезультата Цикл
		
		стр_н = ТаблицаСтабильностьВыполненияТестов.Добавить();
		ЗаполнитьЗначенияСвойств(стр_н,стр);
		Если стр_н.ИндексКартинкиСтабильностиВыполнения>4 Тогда
			стр_н.ИндексКартинкиСтабильностиВыполнения = 4;
		КонецЕсли;
		Если стр.ИндексКартинкиСтабильностиВыполнения = 5 Тогда
			стр_н.СтабильностьВыполнения = Перечисления.СтабильностьВыполненияЗаданий.СредиПоследнихЗаданийНетПровалившихся;
		ИначеЕсли стр.ИндексКартинкиСтабильностиВыполнения = 4 Тогда
			стр_н.СтабильностьВыполнения = Перечисления.СтабильностьВыполненияЗаданий.СредиПоследних5Провалилось1;
		ИначеЕсли стр.ИндексКартинкиСтабильностиВыполнения = 3 Тогда
			стр_н.СтабильностьВыполнения = Перечисления.СтабильностьВыполненияЗаданий.СредиПоследних5Провалилось2;
		ИначеЕсли стр.ИндексКартинкиСтабильностиВыполнения = 2 Тогда
			стр_н.СтабильностьВыполнения = Перечисления.СтабильностьВыполненияЗаданий.СредиПоследних5Провалилось3;
		ИначеЕсли стр.ИндексКартинкиСтабильностиВыполнения = 1 Тогда
			стр_н.СтабильностьВыполнения = Перечисления.СтабильностьВыполненияЗаданий.СредиПоследних5Провалилось4;
		ИначеЕсли стр.ИндексКартинкиСтабильностиВыполнения = 0 Тогда
			стр_н.СтабильностьВыполнения = Перечисления.СтабильностьВыполненияЗаданий.ВсеПослдениеЗаданияПровалились;
		КонецЕсли;
		
		Если стр.ИндексКартинки=0 Тогда
			стр_н.ПоследнийРезультатВыполнения = Перечисления.РезультатыВыполненияШагов.Неопределено;
		ИначеЕсли стр.ИндексКартинки=1 Тогда
			стр_н.ПоследнийРезультатВыполнения = Перечисления.РезультатыВыполненияШагов.Успешно;
		ИначеЕсли стр.ИндексКартинки=2 Тогда
			стр_н.ПоследнийРезультатВыполнения = Перечисления.РезультатыВыполненияШагов.Пропуск;
		ИначеЕсли стр.ИндексКартинки=3 Тогда
			стр_н.ПоследнийРезультатВыполнения = Перечисления.РезультатыВыполненияШагов.Ошибка;
		ИначеЕсли стр.ИндексКартинки=4 Тогда
			стр_н.ПоследнийРезультатВыполнения = Перечисления.РезультатыВыполненияШагов.Провал;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаСтабильностьВыполненияТестов.Колонки.Удалить("ТестируемыйКлиент");
	ТаблицаСтабильностьВыполненияТестов.Колонки.Удалить("СтабильностьВыполнения");	
	ТаблицаСтабильностьВыполненияТестов.Колонки.Удалить("ПоследнийРезультатВыполнения"); 	
	
	
	Для каждого колонка из ТаблицаСтабильностьВыполненияТестов.Колонки Цикл
		СтруктураКолонки = новый Структура("Имя,Заголовок,ТипЗначения,Ширина,ИмяКартинки,Видимость,Служебное",колонка.Имя,колонка.Заголовок,Строка(колонка.ТипЗначения),1,"",Истина,Ложь);
		Если колонка.Имя="Тест" Тогда
			СтруктураКолонки.ТипЗначения = "Строка";
			СтруктураКолонки.Ширина=0;
			СтруктураКолонки.Видимость = Ложь;
		ИначеЕсли колонка.Имя="ТестСиноним" Тогда
			СтруктураКолонки.ТипЗначения = "Строка";
			СтруктураКолонки.Ширина=0;
			СтруктураКолонки.Вставить("АвтовысотаЯчейки",Истина);
		ИначеЕсли колонка.Имя="ТестID" Тогда
			СтруктураКолонки.Служебное = Истина;
			СтруктураКолонки.Видимость = Ложь;
		КонецЕсли;
		Если Найти(колонка.Имя,"ИндексКартинкиСтабильностиВыполнения") Тогда
			СтруктураКолонки.Вставить("ИмяКартинки","СтатусыЗаданийСтильДженкинс");
			СтруктураКолонки.Вставить("ПоложениеЗаголовка","Нет");
		ИначеЕсли Найти(колонка.Имя,"ИндексКартинки") Тогда
			СтруктураКолонки.Вставить("ИмяКартинки","СтатусыЗаданий");
			СтруктураКолонки.Вставить("ПоложениеЗаголовка","Нет");
		КонецЕсли;	
		СтруктураДанных.МассивКолонок.Добавить(СтруктураКолонки);
	КонецЦикла;
	
	
	// сгенерим синонимы
	мОтбор = новый Структура("ТестСиноним","");
	без_синонимов = ТаблицаСтабильностьВыполненияТестов.НайтиСтроки(мОтбор);
	
	Для каждого стр из без_синонимов Цикл 
		стр.ТестСиноним = СтроковыеФункцииКлиентСервер.РазбитьНаСловаПоЗаглавнымСимволамИСпецЗнакам(Строка(стр.Тест),"_");
		СценарноеТестированиеВызовСервера.УстановитьСинонимТеста(стр.Тест,стр.ТестСиноним);
	КонецЦикла;
	
	Для каждого стр из ТаблицаСтабильностьВыполненияТестов Цикл
		
		СтруктураСтроки = новый Структура;
		Для каждого колонка из ТаблицаСтабильностьВыполненияТестов.Колонки Цикл
			СтруктураСтроки.Вставить(колонка.Имя,стр[колонка.Имя]);
		КонецЦикла;
		СтруктураСтроки.Тест = Строка(СтруктураСтроки.Тест);		
		СтруктураДанных.МассивСтрокТаблицы.Добавить(СтруктураСтроки);
		
	КонецЦикла;
	
	Возврат СтруктураДанных;

КонецФункции

Функция ПолучитьСписокТестов(Знач ТестируемыйКлиент) Экспорт
	
	Проверка = ПолучитьПоследнююПроверкуДляТестируемогоКлиента(ТестируемыйКлиент);
	
	СтруктураДанных = новый Структура;
	СтруктураДанных.Вставить("Проверка",Строка(Проверка));
	СтруктураДанных.Вставить("ДатаНачала",Проверка.ДатаНачала);
	СтруктураДанных.Вставить("ДатаНачалаСтрокой",Строка(Формат(Проверка.ДатаНачала,"ДЛФ=DDT")));
	СтруктураДанных.Вставить("ТестируемыйКлиентID",ТестируемыйКлиент.ID);
	СтруктураДанных.Вставить("ТестируемыйКлиентПредставление",ТестируемыйКлиент.Наименование);
	СтруктураДанных.Вставить("ТипОбъекта","Таблица");
	СтруктураДанных.Вставить("ПолеФильтра","ИндексКартинки");
	СтруктураДанных.Вставить("МассивСтрокТаблицы",новый Массив);
	СтруктураДанных.Вставить("МассивКолонок",новый Массив);
	
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Т.Тест,
	|	ЕСТЬNULL(СинонимыТестов.Синоним, """") КАК ТестСиноним,
	|	ВЫБОР
	|		КОГДА Т.Тест ССЫЛКА Справочник.Тесты
	|			ТОГДА Т.Тест.ID
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ТестID,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА Т.КоличествоПровалов > 0
	|				ТОГДА 4
	|			КОГДА Т.КоличествоПровалов = 0
	|					И Т.КоличествоОшибок > 0
	|				ТОГДА 3
	|			КОГДА Т.КоличествоПровалов = 0
	|					И Т.КоличествоОшибок = 0
	|					И Т.КоличествоПропущенных < Т.КоличествоТестовыхСлучаев
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЧИСЛО) КАК ИндексКартинки,
	|	ВЫРАЗИТЬ(Т.КоличествоТестовыхСлучаев КАК ЧИСЛО) КАК КоличествоТестовыхСлучаев,
	|	ВЫРАЗИТЬ(Т.КоличествоПровалов КАК ЧИСЛО) КАК КоличествоПровалов,
	|	ВЫРАЗИТЬ(Т.КоличествоОшибок КАК ЧИСЛО) КАК КоличествоОшибок,
	|	ВЫРАЗИТЬ(Т.КоличествоПропущенных КАК ЧИСЛО) КАК КоличествоПропущенных
	|ИЗ
	|	РегистрСведений.ПротоколыВыполненияТестов КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СинонимыТестов КАК СинонимыТестов
	|		ПО Т.Тест = СинонимыТестов.Тест
	|ГДЕ
	|	Т.Проверка = &Проверка
	|	И Т.ТестируемыйКлиент = &ТестируемыйКлиент";
	
	Запрос.УстановитьПараметр("ТестируемыйКлиент",ТестируемыйКлиент);
	Запрос.УстановитьПараметр("Проверка",Проверка);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	
	// колонки
	Для каждого колонка из Таблица.Колонки Цикл
		СтруктураКолонки = новый Структура("Имя,Заголовок,ТипЗначения,Ширина,ИмяКартинки,Служебное",колонка.Имя,колонка.Заголовок,Строка(колонка.ТипЗначения),1,"",Ложь);
		Если колонка.Имя="Тест" ИЛИ колонка.Имя="ТестID" Тогда
			СтруктураКолонки.ТипЗначения = "Строка";
			СтруктураКолонки.Ширина=0;
			СтруктураКолонки.Служебное = Истина;
		ИначеЕсли колонка.Имя="ТестСиноним" Тогда
			СтруктураКолонки.ТипЗначения = "Строка";
			СтруктураКолонки.Заголовок = "Тест";
			СтруктураКолонки.Ширина=0; 	
			СтруктураКолонки.Вставить("АвтовысотаЯчейки",Истина);
		ИначеЕсли Найти(колонка.Имя,"ИндексКартинки") Тогда
			СтруктураКолонки.Вставить("ИмяКартинки","СтатусыЗаданий");
			СтруктураКолонки.Вставить("ПоложениеЗаголовка","Нет");
			СтруктураКолонки.Вставить("ТипЗначения","Число");
			СтруктураКолонки.Ширина=1;
		Иначе 
			СтруктураКолонки.Вставить("ПоложениеЗаголовка","Нет");
			СтруктураКолонки.Ширина=1;
		КонецЕсли;
		
		Если врег(колонка.Имя)=врег("КоличествоПровалов") Тогда
			СтруктураКолонки.Вставить("ИмяКартинкиЗаголовка","FailedQuad_32x33");
		ИначеЕсли врег(колонка.Имя)=врег("КоличествоОшибок") Тогда
			СтруктураКолонки.Вставить("ИмяКартинкиЗаголовка","BrokenQuad_32x32");
		ИначеЕсли врег(колонка.Имя)=врег("КоличествоПропущенных") Тогда
			СтруктураКолонки.Вставить("ИмяКартинкиЗаголовка","SkippedQuad_32x35");
		КонецЕсли;
		СтруктураДанных.МассивКолонок.Добавить(СтруктураКолонки);
	КонецЦикла;
	
	// сгенерим синонимы
	мОтбор = новый Структура("ТестСиноним","");
	без_синонимов = Таблица.НайтиСтроки(мОтбор);
	
	Для каждого стр из без_синонимов Цикл 
		стр.ТестСиноним = СтроковыеФункцииКлиентСервер.РазбитьНаСловаПоЗаглавнымСимволамИСпецЗнакам(Строка(стр.Тест),"_");
		СценарноеТестированиеВызовСервера.УстановитьСинонимТеста(стр.Тест,стр.ТестСиноним);
	КонецЦикла;
	
	
	// данные
	Для каждого стр из Таблица Цикл
		
		СтруктураСтроки = новый Структура;
		Для каждого колонка из Таблица.Колонки Цикл
			СтруктураСтроки.Вставить(колонка.Имя,стр[колонка.Имя]);
		КонецЦикла;
		СтруктураСтроки.Тест = Строка(СтруктураСтроки.Тест);		
		СтруктураДанных.МассивСтрокТаблицы.Добавить(СтруктураСтроки);
		
	КонецЦикла;
	
	
	Возврат СтруктураДанных;

	
КонецФункции


Функция ПолучитьСписокТестовыхСлучаев(Знач ТестируемыйКлиент, Знач Тест) Экспорт
	
	Проверка = ПолучитьПоследнююПроверкуДляТестируемогоКлиента(ТестируемыйКлиент);
	
	СтруктураДанных = новый Структура;
	СтруктураДанных.Вставить("Проверка",Строка(Проверка));
	СтруктураДанных.Вставить("ДатаНачала",Проверка.ДатаНачала);
	СтруктураДанных.Вставить("ДатаНачалаСтрокой",Строка(Формат(Проверка.ДатаНачала,"ДЛФ=DDT")));
	СтруктураДанных.Вставить("ТестируемыйКлиентID",ТестируемыйКлиент.ID);
	СтруктураДанных.Вставить("ТестируемыйКлиентПредставление",ТестируемыйКлиент.Наименование);
	СтруктураДанных.Вставить("ТипОбъекта","Таблица");
	СтруктураДанных.Вставить("ПолеФильтра","ИндексКартинки");
	СтруктураДанных.Вставить("МассивСтрокТаблицы",новый Массив);
	СтруктураДанных.Вставить("МассивКолонок",новый Массив);
	
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТестовыеСлучаи.Тест КАК Тест,
	|	ВЫБОР
	|		КОГДА ТестовыеСлучаи.Тест ССЫЛКА Справочник.Тесты
	|			ТОГДА ТестовыеСлучаи.Тест.ID
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ТестID,
	|	ТестовыеСлучаи.ТестовыйСлучай КАК ТестовыйСлучай,
	|	ВЫБОР
	|		КОГДА ТестовыеСлучаи.РезультатВыполнения = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияШагов.Провал)
	|			ТОГДА 4
	|		КОГДА ТестовыеСлучаи.РезультатВыполнения = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияШагов.Ошибка)
	|			ТОГДА 3
	|		КОГДА ТестовыеСлучаи.РезультатВыполнения = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияШагов.Пропуск)
	|			ТОГДА 0
	|		КОГДА ТестовыеСлучаи.РезультатВыполнения = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияШагов.Успешно)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИндексКартинки,
	|	ТестовыеСлучаи.КоличествоШагов КАК КоличествоШагов,
	|	ТестовыеСлучаи.ОписаниеОшибки КАК ОписаниеОшибки,
	|	0 КАК Порядок
	|ИЗ
	|	РегистрСведений.ПротоколыВыполненияТестовыхСлучаев КАК ТестовыеСлучаи
	|ГДЕ
	|	ТестовыеСлучаи.ТестируемыйКлиент = &ТестируемыйКлиент
	|	И ТестовыеСлучаи.Проверка = &Проверка
	|	И ТестовыеСлучаи.Тест.ID = &Тест
	|	И НЕ &Тест = """"
	|	И НЕ ТестовыеСлучаи.РезультатВыполнения В (ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияШагов.Неопределено), ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияШагов.ПустаяСсылка))
	|	И &Порядок = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТестовыеСлучаи.Тест,
	|	ВЫБОР
	|		КОГДА ТестовыеСлучаи.Тест ССЫЛКА Справочник.Тесты
	|			ТОГДА ТестовыеСлучаи.Тест.ID
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ТестовыеСлучаи.ТестовыйСлучай,
	|	ВЫБОР
	|		КОГДА ТестовыеСлучаи.РезультатВыполнения = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияШагов.Провал)
	|			ТОГДА 4
	|		КОГДА ТестовыеСлучаи.РезультатВыполнения = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияШагов.Ошибка)
	|			ТОГДА 3
	|		КОГДА ТестовыеСлучаи.РезультатВыполнения = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияШагов.Пропуск)
	|			ТОГДА 0
	|		КОГДА ТестовыеСлучаи.РезультатВыполнения = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияШагов.Успешно)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТестовыеСлучаи.КоличествоШагов,
	|	ТестовыеСлучаи.ОписаниеОшибки,
	|	1
	|ИЗ
	|	РегистрСведений.ПротоколыВыполненияТестовыхСлучаев КАК ТестовыеСлучаи
	|ГДЕ
	|	ТестовыеСлучаи.ТестируемыйКлиент = &ТестируемыйКлиент
	|	И ТестовыеСлучаи.Проверка = &Проверка
	|	И (ТестовыеСлучаи.Тест.Наименование = &Тест
	|			ИЛИ ТестовыеСлучаи.Тест = &Тест)
	|	И НЕ &Тест = """"
	|	И НЕ ТестовыеСлучаи.РезультатВыполнения В (ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияШагов.Неопределено), ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияШагов.ПустаяСсылка))
	|	И &Порядок = 1";
	
	Запрос.УстановитьПараметр("ТестируемыйКлиент",ТестируемыйКлиент);
	Запрос.УстановитьПараметр("Тест",Тест);
	Запрос.УстановитьПараметр("Проверка",Проверка);
	Запрос.УстановитьПараметр("Порядок",0);

	Таблица = Запрос.Выполнить().Выгрузить();
	
	Если Таблица.Количество()=0 Тогда
		Запрос.УстановитьПараметр("Порядок",1);
		Таблица = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	
	// колонки
	Для каждого колонка из Таблица.Колонки Цикл
		СтруктураКолонки = новый Структура("Имя,Заголовок,ТипЗначения,Ширина,ИмяКартинки",колонка.Имя,колонка.Заголовок,Строка(колонка.ТипЗначения),1,"");
		Если колонка.Имя="Тест" Тогда
			СтруктураКолонки.ТипЗначения = "Строка";
			СтруктураКолонки.Ширина=0;
		ИначеЕсли колонка.Имя="ТестовыйСлучай" Тогда
			СтруктураКолонки.ТипЗначения = "Строка";
			СтруктураКолонки.Вставить("Заголовок","Тестовый случай");
			СтруктураКолонки.Ширина=0;
		ИначеЕсли Найти(колонка.Имя,"КоличествоШагов") Тогда
			СтруктураКолонки.Вставить("Заголовок","Шагов");
		ИначеЕсли Найти(колонка.Имя,"ОписаниеОшибки") Тогда
			СтруктураКолонки.Вставить("Заголовок","Ошибка");
		ИначеЕсли Найти(колонка.Имя,"ИндексКартинки") Тогда
			СтруктураКолонки.Вставить("ИмяКартинки","СтатусыЗаданий");
			СтруктураКолонки.Вставить("ПоложениеЗаголовка","Нет");
			СтруктураКолонки.Вставить("ТипЗначения","Число");
			СтруктураКолонки.Ширина=1;
		Иначе 
			СтруктураКолонки.Вставить("ПоложениеЗаголовка","Нет");
			СтруктураКолонки.Ширина=1;
		КонецЕсли;
		
		Если врег(колонка.Имя)=врег("КоличествоПровалов") Тогда
			СтруктураКолонки.Вставить("ИмяКартинкиЗаголовка","FailedQuad_32x33");
		ИначеЕсли врег(колонка.Имя)=врег("КоличествоОшибок") Тогда
			СтруктураКолонки.Вставить("ИмяКартинкиЗаголовка","BrokenQuad_32x32");
		ИначеЕсли врег(колонка.Имя)=врег("КоличествоПропущенных") Тогда
			СтруктураКолонки.Вставить("ИмяКартинкиЗаголовка","SkippedQuad_32x35");
		КонецЕсли;
		СтруктураДанных.МассивКолонок.Добавить(СтруктураКолонки);
	КонецЦикла;
	
	
	// данные
	Для каждого стр из Таблица Цикл
		
		СтруктураСтроки = новый Структура;
		Для каждого колонка из Таблица.Колонки Цикл
			СтруктураСтроки.Вставить(колонка.Имя,стр[колонка.Имя]);
		КонецЦикла;
		СтруктураСтроки.Тест = Строка(СтруктураСтроки.Тест);		
		СтруктураДанных.МассивСтрокТаблицы.Добавить(СтруктураСтроки);
		
	КонецЦикла;
	
	
	Возврат СтруктураДанных;

	
КонецФункции



#конецОбласти