
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Вставить содержимое обработчика
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Отказ = Истина; // форма не предназначена для открытия
КонецПроцедуры

&НаКлиенте
Функция ВыгрузитьОтчетВыполненияСценарногоТестированияФорматJUnitXML(ПутьКаталога,ПутьКаталогСценария,ТестРезультатСтруктура) Экспорт 
	
	XMLСтрока = "";
	
	Попытка
		
		// Создать объект записи XML и открыть файл
		НоваяЗаписьXML = Новый ЗаписьXML;
		НоваяЗаписьXML.УстановитьСтроку("UTF-8");
		
		НоваяЗаписьXML.ЗаписатьОбъявлениеXML();
		
		НоваяЗаписьXML.ЗаписатьНачалоЭлемента("testsuites");
		
		// общее описание теста
		
		//НоваяЗаписьXML.ЗаписатьАтрибут("name", 		XMLСтрока(ТестРезультатСтруктура.Имя));
		НоваяЗаписьXML.ЗаписатьАтрибут("name", 		XMLСтрока(ПутьКаталогСценария));
		НоваяЗаписьXML.ЗаписатьАтрибут("time", 		XMLСтрока(ТестРезультатСтруктура.ВремяВыполнения));
		НоваяЗаписьXML.ЗаписатьАтрибут("tests", 	XMLСтрока(ТестРезультатСтруктура.КоличествоОбщее));
		НоваяЗаписьXML.ЗаписатьАтрибут("failures", 	XMLСтрока(ТестРезультатСтруктура.КоличествоНевыполненных));
		НоваяЗаписьXML.ЗаписатьАтрибут("errors", 	XMLСтрока(ТестРезультатСтруктура.КоличествоОшибок));
		НоваяЗаписьXML.ЗаписатьАтрибут("skipped", 	XMLСтрока(ТестРезультатСтруктура.КоличествоПропущенных));
		НоваяЗаписьXML.ЗаписатьАтрибут("timestamp", XMLСтрока(Формат(ТекущаяДата(),"ДФ=yyyy-MM-ddTHH:mm:ss")));
		
		// пока сохраняем по умолчанию
		НоваяЗаписьXML.ЗаписатьАтрибут("connection_string", XMLСтрока(Объект.ПутьПодключенияКлиентаТестирования));
		Если ЗначениеЗаполнено(Объект.НомерПроверки) Тогда
			НоваяЗаписьXML.ЗаписатьАтрибут("test_number", XMLСтрока(Объект.НомерПроверки));
		КонецЕсли;
		НоваяЗаписьXML.ЗаписатьАтрибут("test_client", 	""); 		
		
		НоваяЗаписьXML.ЗаписатьНачалоЭлемента("testsuite");
		НоваяЗаписьXML.ЗаписатьАтрибут("name", ПутьКаталогСценария);
		
		НоваяЗаписьXML.ЗаписатьНачалоЭлемента("testsuite");
		НоваяЗаписьXML.ЗаписатьАтрибут("name", ТестРезультатСтруктура.Имя);
		НоваяЗаписьXML.ЗаписатьАтрибут("timestamp", XMLСтрока(Формат(ТекущаяДата(),"ДФ=yyyy-MM-ddTHH:mm:ss")));
		
		
		// сохраняем выделенные случаи
		Для каждого стр из ТестРезультатСтруктура.ТестовыеСлучаи Цикл
			
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("testcase");
			//НоваяЗаписьXML.ЗаписатьАтрибут("classname", XMLСтрока(ТестРезультатСтруктура.Имя));
			НоваяЗаписьXML.ЗаписатьАтрибут("name", XMLСтрока(стр.Имя));
			НоваяЗаписьXML.ЗаписатьАтрибут("time", XMLСтрока(стр.time));
			
			Если стр.РезультатВыполнения=1 Тогда
				НоваяЗаписьXML.ЗаписатьАтрибут("status", "passed");
			ИначеЕсли стр.РезультатВыполнения=2 Тогда
				НоваяЗаписьXML.ЗаписатьАтрибут("status", "error");
				НоваяЗаписьXML.ЗаписатьНачалоЭлемента("error");
				Сообщение = УдалитьНедопустимыеСимволыXML(стр.ТекстОшибки);
				НоваяЗаписьXML.ЗаписатьАтрибут("message", XMLСтрока(Сообщение));
				НоваяЗаписьXML.ЗаписатьКонецЭлемента();
			ИначеЕсли стр.РезультатВыполнения=3 Тогда
				НоваяЗаписьXML.ЗаписатьАтрибут("status", "failure");
				НоваяЗаписьXML.ЗаписатьНачалоЭлемента("failure");
				Сообщение = УдалитьНедопустимыеСимволыXML(стр.ТекстОшибки);
				НоваяЗаписьXML.ЗаписатьАтрибут("message", XMLСтрока(Сообщение));
				НоваяЗаписьXML.ЗаписатьКонецЭлемента();
			Иначе 
				НоваяЗаписьXML.ЗаписатьАтрибут("status", "skipped");
				НоваяЗаписьXML.ЗаписатьНачалоЭлемента("skipped");
				НоваяЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
			
			НоваяЗаписьXML.ЗаписатьКонецЭлемента();	
			
		КонецЦикла;		
		
		
		НоваяЗаписьXML.ЗаписатьКонецЭлемента();
		
		НоваяЗаписьXML.ЗаписатьКонецЭлемента();
		
		НоваяЗаписьXML.ЗаписатьКонецЭлемента();
		
		XMLСтрока = НоваяЗаписьXML.Закрыть();
		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат XMLСтрока;
	
КонецФункции


// Функция - Получить макет на сервере
//
// Параметры:
//  ИмяМакета	 - строка	 - имя макета
// 
// Возвращаемое значение:
// макет  - макет
//
&НаСервере
Функция ПолучитьМакетНаСервере(ИмяМакета)
	Макет = Неопределено;
	Попытка
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		Макет = ОбработкаОбъект.ПолучитьМакет(ИмяМакета);
	Исключение
		Сообщить(ОписаниеОшибки());		
	КонецПопытки;
	Возврат Макет;
КонецФункции


// { Helpers
&НаКлиенте
Функция УдалитьНедопустимыеСимволыXML(Знач Результат)
	Позиция = НайтиНедопустимыеСимволыXML(Результат);
	Пока Позиция > 0 Цикл
		Результат = Лев(Результат, Позиция - 1) + Сред(Результат, Позиция + 1);
		Позиция = НайтиНедопустимыеСимволыXML(Результат, Позиция);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция Allure_ПолучитьПреобразованнуюСтрокуXML(Знач Строка)

	Строка = СтрЗаменить(Строка,"<test-suite-result","<ns2:test-suite");
	Строка = СтрЗаменить(Строка,"</test-suite-result>","</ns2:test-suite>");
	Строка = СтрЗаменить(Строка,"xmlns=""urn:model.allure.qatools.yandex.ru""","xmlns:ns2=""urn:model.allure.qatools.yandex.ru""");
	
	Возврат Строка;

КонецФункции

&НаКлиенте
Функция Allure_ПолучитьМетку(Фабрика, Имя, Значение)

	Типlabel	= Фабрика.Тип("urn:model.allure.qatools.yandex.ru", "label");
	Метка		= Фабрика.Создать(Типlabel);
	Метка.name	= Имя;
	Метка.value = Значение;
	
	Возврат Метка;

КонецФункции

&НаКлиенте
Функция Allure_ПолучитьПараметр(Фабрика, Имя, Значение, Тип)

	ТипParameter 	= Фабрика.Тип("urn:model.allure.qatools.yandex.ru", "parameter");
	Параметр 		= Фабрика.Создать(ТипParameter);
	Параметр.name  	= Имя;
	Параметр.value 	= Значение;
	Параметр.kind 	= Тип;
	
	Возврат Параметр;

КонецФункции

&НаКлиенте
Функция Allure_ПолучитьОшибку(Фабрика, Знач СообщениеОбОшибке)

	ТипFailure		= Фабрика.Тип("urn:model.allure.qatools.yandex.ru", "failure");
	Ошибка			= Фабрика.Создать(ТипFailure);
	Ошибка.message	= СообщениеОбОшибке;	
	
	Возврат Ошибка;

КонецФункции

&НаКлиенте
Функция Allure_ПолучитьВажность(Значение="Значительная")

	Важность = "normal";
	
	Если Значение="Блокирующая" Тогда
		Важность = "blocker";
	ИначеЕсли Значение="Критическая" Тогда
		Важность = "critical";
	ИначеЕсли Значение="Значительная" Тогда
		Важность = "normal";
	ИначеЕсли Значение="Незначительная" Тогда
		Важность = "minor";
	ИначеЕсли Значение="Тривиальная" Тогда
		Важность = "trivial";
	КонецЕсли;
	
	Возврат Важность;

КонецФункции

&НаКлиенте
Функция Allure_ПолучитьСтатус(Значение="Пропущено")  

	Статус = "failed";
	
	Если ТипЗнч(Значение)=Тип("Число") Тогда
		Если Значение = 1 Тогда
			Статус = "passed";	
		ИначеЕсли Значение = 0 Тогда
			Статус = "canceled";
		ИначеЕсли Значение = 2 Тогда
			Статус = "broken";
		ИначеЕсли Значение = 3 Тогда
			Статус = "failed";
		КонецЕсли;		
	Иначе		
		Если Значение = "Успешно" Тогда
			Статус = "passed";	
		ИначеЕсли Значение = "Пропущено" ИЛИ Значение = "" Тогда
			Статус = "canceled";
		ИначеЕсли Значение = "Предупрежедение" Тогда
			Статус = "broken";
		ИначеЕсли Значение = "Ошибка" Тогда
			Статус = "failed";
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Статус;

КонецФункции

// } Helpers
